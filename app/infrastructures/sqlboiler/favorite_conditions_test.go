// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFavoriteConditions(t *testing.T) {
	t.Parallel()

	query := FavoriteConditions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFavoriteConditionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFavoriteConditionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FavoriteConditions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFavoriteConditionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FavoriteConditionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFavoriteConditionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FavoriteConditionExists(ctx, tx, o.QueryConditionsID, o.StaffsID)
	if err != nil {
		t.Errorf("Unable to check if FavoriteCondition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FavoriteConditionExists to return true, but got false.")
	}
}

func testFavoriteConditionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	favoriteConditionFound, err := FindFavoriteCondition(ctx, tx, o.QueryConditionsID, o.StaffsID)
	if err != nil {
		t.Error(err)
	}

	if favoriteConditionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFavoriteConditionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FavoriteConditions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFavoriteConditionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FavoriteConditions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFavoriteConditionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	favoriteConditionOne := &FavoriteCondition{}
	favoriteConditionTwo := &FavoriteCondition{}
	if err = randomize.Struct(seed, favoriteConditionOne, favoriteConditionDBTypes, false, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, favoriteConditionTwo, favoriteConditionDBTypes, false, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = favoriteConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = favoriteConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FavoriteConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFavoriteConditionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	favoriteConditionOne := &FavoriteCondition{}
	favoriteConditionTwo := &FavoriteCondition{}
	if err = randomize.Struct(seed, favoriteConditionOne, favoriteConditionDBTypes, false, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, favoriteConditionTwo, favoriteConditionDBTypes, false, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = favoriteConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = favoriteConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func favoriteConditionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func favoriteConditionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func favoriteConditionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func favoriteConditionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func favoriteConditionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func favoriteConditionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func favoriteConditionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func favoriteConditionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func favoriteConditionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FavoriteCondition) error {
	*o = FavoriteCondition{}
	return nil
}

func testFavoriteConditionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FavoriteCondition{}
	o := &FavoriteCondition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition object: %s", err)
	}

	AddFavoriteConditionHook(boil.BeforeInsertHook, favoriteConditionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	favoriteConditionBeforeInsertHooks = []FavoriteConditionHook{}

	AddFavoriteConditionHook(boil.AfterInsertHook, favoriteConditionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	favoriteConditionAfterInsertHooks = []FavoriteConditionHook{}

	AddFavoriteConditionHook(boil.AfterSelectHook, favoriteConditionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	favoriteConditionAfterSelectHooks = []FavoriteConditionHook{}

	AddFavoriteConditionHook(boil.BeforeUpdateHook, favoriteConditionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	favoriteConditionBeforeUpdateHooks = []FavoriteConditionHook{}

	AddFavoriteConditionHook(boil.AfterUpdateHook, favoriteConditionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	favoriteConditionAfterUpdateHooks = []FavoriteConditionHook{}

	AddFavoriteConditionHook(boil.BeforeDeleteHook, favoriteConditionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	favoriteConditionBeforeDeleteHooks = []FavoriteConditionHook{}

	AddFavoriteConditionHook(boil.AfterDeleteHook, favoriteConditionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	favoriteConditionAfterDeleteHooks = []FavoriteConditionHook{}

	AddFavoriteConditionHook(boil.BeforeUpsertHook, favoriteConditionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	favoriteConditionBeforeUpsertHooks = []FavoriteConditionHook{}

	AddFavoriteConditionHook(boil.AfterUpsertHook, favoriteConditionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	favoriteConditionAfterUpsertHooks = []FavoriteConditionHook{}
}

func testFavoriteConditionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFavoriteConditionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(favoriteConditionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFavoriteConditionToOneQueryConditionUsingQueryCondition(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FavoriteCondition
	var foreign QueryCondition

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, favoriteConditionDBTypes, false, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.QueryConditionsID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.QueryCondition().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FavoriteConditionSlice{&local}
	if err = local.L.LoadQueryCondition(ctx, tx, false, (*[]*FavoriteCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.QueryCondition == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.QueryCondition = nil
	if err = local.L.LoadQueryCondition(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.QueryCondition == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFavoriteConditionToOneStaffUsingStaff(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FavoriteCondition
	var foreign Staff

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, favoriteConditionDBTypes, false, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StaffsID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Staff().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FavoriteConditionSlice{&local}
	if err = local.L.LoadStaff(ctx, tx, false, (*[]*FavoriteCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Staff == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Staff = nil
	if err = local.L.LoadStaff(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Staff == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFavoriteConditionToOneSetOpQueryConditionUsingQueryCondition(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FavoriteCondition
	var b, c QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, favoriteConditionDBTypes, false, strmangle.SetComplement(favoriteConditionPrimaryKeyColumns, favoriteConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*QueryCondition{&b, &c} {
		err = a.SetQueryCondition(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.QueryCondition != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FavoriteConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.QueryConditionsID != x.ID {
			t.Error("foreign key was wrong value", a.QueryConditionsID)
		}

		if exists, err := FavoriteConditionExists(ctx, tx, a.QueryConditionsID, a.StaffsID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testFavoriteConditionToOneSetOpStaffUsingStaff(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FavoriteCondition
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, favoriteConditionDBTypes, false, strmangle.SetComplement(favoriteConditionPrimaryKeyColumns, favoriteConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Staff{&b, &c} {
		err = a.SetStaff(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Staff != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FavoriteConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StaffsID != x.ID {
			t.Error("foreign key was wrong value", a.StaffsID)
		}

		if exists, err := FavoriteConditionExists(ctx, tx, a.QueryConditionsID, a.StaffsID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testFavoriteConditionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFavoriteConditionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FavoriteConditionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFavoriteConditionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FavoriteConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	favoriteConditionDBTypes = map[string]string{`QueryConditionsID`: `text`, `StaffsID`: `text`, `RowOrder`: `integer`, `CategoryName`: `text`}
	_                        = bytes.MinRead
)

func testFavoriteConditionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(favoriteConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(favoriteConditionAllColumns) == len(favoriteConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFavoriteConditionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(favoriteConditionAllColumns) == len(favoriteConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FavoriteCondition{}
	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, favoriteConditionDBTypes, true, favoriteConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(favoriteConditionAllColumns, favoriteConditionPrimaryKeyColumns) {
		fields = favoriteConditionAllColumns
	} else {
		fields = strmangle.SetComplement(
			favoriteConditionAllColumns,
			favoriteConditionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FavoriteConditionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFavoriteConditionsUpsert(t *testing.T) {
	t.Parallel()

	if len(favoriteConditionAllColumns) == len(favoriteConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FavoriteCondition{}
	if err = randomize.Struct(seed, &o, favoriteConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FavoriteCondition: %s", err)
	}

	count, err := FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, favoriteConditionDBTypes, false, favoriteConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FavoriteCondition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FavoriteCondition: %s", err)
	}

	count, err = FavoriteConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
