// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQueryDisplayItems(t *testing.T) {
	t.Parallel()

	query := QueryDisplayItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQueryDisplayItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryDisplayItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := QueryDisplayItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryDisplayItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryDisplayItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryDisplayItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QueryDisplayItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if QueryDisplayItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QueryDisplayItemExists to return true, but got false.")
	}
}

func testQueryDisplayItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	queryDisplayItemFound, err := FindQueryDisplayItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if queryDisplayItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQueryDisplayItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = QueryDisplayItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testQueryDisplayItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := QueryDisplayItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQueryDisplayItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	queryDisplayItemOne := &QueryDisplayItem{}
	queryDisplayItemTwo := &QueryDisplayItem{}
	if err = randomize.Struct(seed, queryDisplayItemOne, queryDisplayItemDBTypes, false, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}
	if err = randomize.Struct(seed, queryDisplayItemTwo, queryDisplayItemDBTypes, false, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queryDisplayItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryDisplayItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryDisplayItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQueryDisplayItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	queryDisplayItemOne := &QueryDisplayItem{}
	queryDisplayItemTwo := &QueryDisplayItem{}
	if err = randomize.Struct(seed, queryDisplayItemOne, queryDisplayItemDBTypes, false, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}
	if err = randomize.Struct(seed, queryDisplayItemTwo, queryDisplayItemDBTypes, false, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queryDisplayItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryDisplayItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func queryDisplayItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func queryDisplayItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func queryDisplayItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func queryDisplayItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func queryDisplayItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func queryDisplayItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func queryDisplayItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func queryDisplayItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func queryDisplayItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryDisplayItem) error {
	*o = QueryDisplayItem{}
	return nil
}

func testQueryDisplayItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &QueryDisplayItem{}
	o := &QueryDisplayItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem object: %s", err)
	}

	AddQueryDisplayItemHook(boil.BeforeInsertHook, queryDisplayItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemBeforeInsertHooks = []QueryDisplayItemHook{}

	AddQueryDisplayItemHook(boil.AfterInsertHook, queryDisplayItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemAfterInsertHooks = []QueryDisplayItemHook{}

	AddQueryDisplayItemHook(boil.AfterSelectHook, queryDisplayItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemAfterSelectHooks = []QueryDisplayItemHook{}

	AddQueryDisplayItemHook(boil.BeforeUpdateHook, queryDisplayItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemBeforeUpdateHooks = []QueryDisplayItemHook{}

	AddQueryDisplayItemHook(boil.AfterUpdateHook, queryDisplayItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemAfterUpdateHooks = []QueryDisplayItemHook{}

	AddQueryDisplayItemHook(boil.BeforeDeleteHook, queryDisplayItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemBeforeDeleteHooks = []QueryDisplayItemHook{}

	AddQueryDisplayItemHook(boil.AfterDeleteHook, queryDisplayItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemAfterDeleteHooks = []QueryDisplayItemHook{}

	AddQueryDisplayItemHook(boil.BeforeUpsertHook, queryDisplayItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemBeforeUpsertHooks = []QueryDisplayItemHook{}

	AddQueryDisplayItemHook(boil.AfterUpsertHook, queryDisplayItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	queryDisplayItemAfterUpsertHooks = []QueryDisplayItemHook{}
}

func testQueryDisplayItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryDisplayItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(queryDisplayItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryDisplayItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueryDisplayItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryDisplayItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueryDisplayItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryDisplayItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	queryDisplayItemDBTypes = map[string]string{`ID`: `text`, `Del`: `boolean`, `CreatedAt`: `timestamp without time zone`, `CreStaffID`: `text`, `UpdatedAt`: `timestamp without time zone`, `UpdateStaffID`: `text`, `QueryConditionID`: `text`, `DisplayFieldID`: `text`, `RowOrder`: `integer`}
	_                       = bytes.MinRead
)

func testQueryDisplayItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(queryDisplayItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(queryDisplayItemAllColumns) == len(queryDisplayItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQueryDisplayItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(queryDisplayItemAllColumns) == len(queryDisplayItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryDisplayItem{}
	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryDisplayItemDBTypes, true, queryDisplayItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(queryDisplayItemAllColumns, queryDisplayItemPrimaryKeyColumns) {
		fields = queryDisplayItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			queryDisplayItemAllColumns,
			queryDisplayItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QueryDisplayItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQueryDisplayItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(queryDisplayItemAllColumns) == len(queryDisplayItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := QueryDisplayItem{}
	if err = randomize.Struct(seed, &o, queryDisplayItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryDisplayItem: %s", err)
	}

	count, err := QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, queryDisplayItemDBTypes, false, queryDisplayItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryDisplayItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryDisplayItem: %s", err)
	}

	count, err = QueryDisplayItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
