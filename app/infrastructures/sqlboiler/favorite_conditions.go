// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FavoriteCondition is an object representing the database table.
type FavoriteCondition struct {
	QueryConditionsID string   `db:"query_conditions_id" boil:"query_conditions_id" json:"query_conditions_id" toml:"query_conditions_id" yaml:"query_conditions_id"`
	StaffsID          string   `db:"staffs_id" boil:"staffs_id" json:"staffs_id" toml:"staffs_id" yaml:"staffs_id"`
	RowOrder          null.Int `db:"row_order" boil:"row_order" json:"row_order,omitempty" toml:"row_order" yaml:"row_order,omitempty"`

	R *favoriteConditionR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L favoriteConditionL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FavoriteConditionColumns = struct {
	QueryConditionsID string
	StaffsID          string
	RowOrder          string
}{
	QueryConditionsID: "query_conditions_id",
	StaffsID:          "staffs_id",
	RowOrder:          "row_order",
}

var FavoriteConditionTableColumns = struct {
	QueryConditionsID string
	StaffsID          string
	RowOrder          string
}{
	QueryConditionsID: "favorite_conditions.query_conditions_id",
	StaffsID:          "favorite_conditions.staffs_id",
	RowOrder:          "favorite_conditions.row_order",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FavoriteConditionWhere = struct {
	QueryConditionsID whereHelperstring
	StaffsID          whereHelperstring
	RowOrder          whereHelpernull_Int
}{
	QueryConditionsID: whereHelperstring{field: "\"favorite_conditions\".\"query_conditions_id\""},
	StaffsID:          whereHelperstring{field: "\"favorite_conditions\".\"staffs_id\""},
	RowOrder:          whereHelpernull_Int{field: "\"favorite_conditions\".\"row_order\""},
}

// FavoriteConditionRels is where relationship names are stored.
var FavoriteConditionRels = struct {
	QueryCondition string
	Staff          string
}{
	QueryCondition: "QueryCondition",
	Staff:          "Staff",
}

// favoriteConditionR is where relationships are stored.
type favoriteConditionR struct {
	QueryCondition *QueryCondition `db:"QueryCondition" boil:"QueryCondition" json:"QueryCondition" toml:"QueryCondition" yaml:"QueryCondition"`
	Staff          *Staff          `db:"Staff" boil:"Staff" json:"Staff" toml:"Staff" yaml:"Staff"`
}

// NewStruct creates a new relationship struct
func (*favoriteConditionR) NewStruct() *favoriteConditionR {
	return &favoriteConditionR{}
}

// favoriteConditionL is where Load methods for each relationship are stored.
type favoriteConditionL struct{}

var (
	favoriteConditionAllColumns            = []string{"query_conditions_id", "staffs_id", "row_order"}
	favoriteConditionColumnsWithoutDefault = []string{"query_conditions_id", "staffs_id", "row_order"}
	favoriteConditionColumnsWithDefault    = []string{}
	favoriteConditionPrimaryKeyColumns     = []string{"query_conditions_id", "staffs_id"}
)

type (
	// FavoriteConditionSlice is an alias for a slice of pointers to FavoriteCondition.
	// This should almost always be used instead of []FavoriteCondition.
	FavoriteConditionSlice []*FavoriteCondition
	// FavoriteConditionHook is the signature for custom FavoriteCondition hook methods
	FavoriteConditionHook func(context.Context, boil.ContextExecutor, *FavoriteCondition) error

	favoriteConditionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	favoriteConditionType                 = reflect.TypeOf(&FavoriteCondition{})
	favoriteConditionMapping              = queries.MakeStructMapping(favoriteConditionType)
	favoriteConditionPrimaryKeyMapping, _ = queries.BindMapping(favoriteConditionType, favoriteConditionMapping, favoriteConditionPrimaryKeyColumns)
	favoriteConditionInsertCacheMut       sync.RWMutex
	favoriteConditionInsertCache          = make(map[string]insertCache)
	favoriteConditionUpdateCacheMut       sync.RWMutex
	favoriteConditionUpdateCache          = make(map[string]updateCache)
	favoriteConditionUpsertCacheMut       sync.RWMutex
	favoriteConditionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var favoriteConditionBeforeInsertHooks []FavoriteConditionHook
var favoriteConditionBeforeUpdateHooks []FavoriteConditionHook
var favoriteConditionBeforeDeleteHooks []FavoriteConditionHook
var favoriteConditionBeforeUpsertHooks []FavoriteConditionHook

var favoriteConditionAfterInsertHooks []FavoriteConditionHook
var favoriteConditionAfterSelectHooks []FavoriteConditionHook
var favoriteConditionAfterUpdateHooks []FavoriteConditionHook
var favoriteConditionAfterDeleteHooks []FavoriteConditionHook
var favoriteConditionAfterUpsertHooks []FavoriteConditionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FavoriteCondition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FavoriteCondition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FavoriteCondition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FavoriteCondition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FavoriteCondition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FavoriteCondition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FavoriteCondition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FavoriteCondition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FavoriteCondition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range favoriteConditionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFavoriteConditionHook registers your hook function for all future operations.
func AddFavoriteConditionHook(hookPoint boil.HookPoint, favoriteConditionHook FavoriteConditionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		favoriteConditionBeforeInsertHooks = append(favoriteConditionBeforeInsertHooks, favoriteConditionHook)
	case boil.BeforeUpdateHook:
		favoriteConditionBeforeUpdateHooks = append(favoriteConditionBeforeUpdateHooks, favoriteConditionHook)
	case boil.BeforeDeleteHook:
		favoriteConditionBeforeDeleteHooks = append(favoriteConditionBeforeDeleteHooks, favoriteConditionHook)
	case boil.BeforeUpsertHook:
		favoriteConditionBeforeUpsertHooks = append(favoriteConditionBeforeUpsertHooks, favoriteConditionHook)
	case boil.AfterInsertHook:
		favoriteConditionAfterInsertHooks = append(favoriteConditionAfterInsertHooks, favoriteConditionHook)
	case boil.AfterSelectHook:
		favoriteConditionAfterSelectHooks = append(favoriteConditionAfterSelectHooks, favoriteConditionHook)
	case boil.AfterUpdateHook:
		favoriteConditionAfterUpdateHooks = append(favoriteConditionAfterUpdateHooks, favoriteConditionHook)
	case boil.AfterDeleteHook:
		favoriteConditionAfterDeleteHooks = append(favoriteConditionAfterDeleteHooks, favoriteConditionHook)
	case boil.AfterUpsertHook:
		favoriteConditionAfterUpsertHooks = append(favoriteConditionAfterUpsertHooks, favoriteConditionHook)
	}
}

// One returns a single favoriteCondition record from the query.
func (q favoriteConditionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FavoriteCondition, error) {
	o := &FavoriteCondition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for favorite_conditions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FavoriteCondition records from the query.
func (q favoriteConditionQuery) All(ctx context.Context, exec boil.ContextExecutor) (FavoriteConditionSlice, error) {
	var o []*FavoriteCondition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to FavoriteCondition slice")
	}

	if len(favoriteConditionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FavoriteCondition records in the query.
func (q favoriteConditionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count favorite_conditions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q favoriteConditionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if favorite_conditions exists")
	}

	return count > 0, nil
}

// QueryCondition pointed to by the foreign key.
func (o *FavoriteCondition) QueryCondition(mods ...qm.QueryMod) queryConditionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.QueryConditionsID),
	}

	queryMods = append(queryMods, mods...)

	query := QueryConditions(queryMods...)
	queries.SetFrom(query.Query, "\"query_conditions\"")

	return query
}

// Staff pointed to by the foreign key.
func (o *FavoriteCondition) Staff(mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StaffsID),
	}

	queryMods = append(queryMods, mods...)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staffs\"")

	return query
}

// LoadQueryCondition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (favoriteConditionL) LoadQueryCondition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteCondition interface{}, mods queries.Applicator) error {
	var slice []*FavoriteCondition
	var object *FavoriteCondition

	if singular {
		object = maybeFavoriteCondition.(*FavoriteCondition)
	} else {
		slice = *maybeFavoriteCondition.(*[]*FavoriteCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &favoriteConditionR{}
		}
		args = append(args, object.QueryConditionsID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteConditionR{}
			}

			for _, a := range args {
				if a == obj.QueryConditionsID {
					continue Outer
				}
			}

			args = append(args, obj.QueryConditionsID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`query_conditions`),
		qm.WhereIn(`query_conditions.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load QueryCondition")
	}

	var resultSlice []*QueryCondition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice QueryCondition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for query_conditions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_conditions")
	}

	if len(favoriteConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QueryCondition = foreign
		if foreign.R == nil {
			foreign.R = &queryConditionR{}
		}
		foreign.R.FavoriteConditions = append(foreign.R.FavoriteConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QueryConditionsID == foreign.ID {
				local.R.QueryCondition = foreign
				if foreign.R == nil {
					foreign.R = &queryConditionR{}
				}
				foreign.R.FavoriteConditions = append(foreign.R.FavoriteConditions, local)
				break
			}
		}
	}

	return nil
}

// LoadStaff allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (favoriteConditionL) LoadStaff(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFavoriteCondition interface{}, mods queries.Applicator) error {
	var slice []*FavoriteCondition
	var object *FavoriteCondition

	if singular {
		object = maybeFavoriteCondition.(*FavoriteCondition)
	} else {
		slice = *maybeFavoriteCondition.(*[]*FavoriteCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &favoriteConditionR{}
		}
		args = append(args, object.StaffsID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &favoriteConditionR{}
			}

			for _, a := range args {
				if a == obj.StaffsID {
					continue Outer
				}
			}

			args = append(args, obj.StaffsID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`staffs`),
		qm.WhereIn(`staffs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(favoriteConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Staff = foreign
		if foreign.R == nil {
			foreign.R = &staffR{}
		}
		foreign.R.FavoriteConditions = append(foreign.R.FavoriteConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaffsID == foreign.ID {
				local.R.Staff = foreign
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.FavoriteConditions = append(foreign.R.FavoriteConditions, local)
				break
			}
		}
	}

	return nil
}

// SetQueryCondition of the favoriteCondition to the related item.
// Sets o.R.QueryCondition to related.
// Adds o to related.R.FavoriteConditions.
func (o *FavoriteCondition) SetQueryCondition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *QueryCondition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"favorite_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"query_conditions_id"}),
		strmangle.WhereClause("\"", "\"", 2, favoriteConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.QueryConditionsID, o.StaffsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QueryConditionsID = related.ID
	if o.R == nil {
		o.R = &favoriteConditionR{
			QueryCondition: related,
		}
	} else {
		o.R.QueryCondition = related
	}

	if related.R == nil {
		related.R = &queryConditionR{
			FavoriteConditions: FavoriteConditionSlice{o},
		}
	} else {
		related.R.FavoriteConditions = append(related.R.FavoriteConditions, o)
	}

	return nil
}

// SetStaff of the favoriteCondition to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.FavoriteConditions.
func (o *FavoriteCondition) SetStaff(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"favorite_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"staffs_id"}),
		strmangle.WhereClause("\"", "\"", 2, favoriteConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.QueryConditionsID, o.StaffsID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StaffsID = related.ID
	if o.R == nil {
		o.R = &favoriteConditionR{
			Staff: related,
		}
	} else {
		o.R.Staff = related
	}

	if related.R == nil {
		related.R = &staffR{
			FavoriteConditions: FavoriteConditionSlice{o},
		}
	} else {
		related.R.FavoriteConditions = append(related.R.FavoriteConditions, o)
	}

	return nil
}

// FavoriteConditions retrieves all the records using an executor.
func FavoriteConditions(mods ...qm.QueryMod) favoriteConditionQuery {
	mods = append(mods, qm.From("\"favorite_conditions\""))
	return favoriteConditionQuery{NewQuery(mods...)}
}

// FindFavoriteCondition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFavoriteCondition(ctx context.Context, exec boil.ContextExecutor, queryConditionsID string, staffsID string, selectCols ...string) (*FavoriteCondition, error) {
	favoriteConditionObj := &FavoriteCondition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"favorite_conditions\" where \"query_conditions_id\"=$1 AND \"staffs_id\"=$2", sel,
	)

	q := queries.Raw(query, queryConditionsID, staffsID)

	err := q.Bind(ctx, exec, favoriteConditionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from favorite_conditions")
	}

	if err = favoriteConditionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return favoriteConditionObj, err
	}

	return favoriteConditionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FavoriteCondition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no favorite_conditions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(favoriteConditionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	favoriteConditionInsertCacheMut.RLock()
	cache, cached := favoriteConditionInsertCache[key]
	favoriteConditionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			favoriteConditionAllColumns,
			favoriteConditionColumnsWithDefault,
			favoriteConditionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(favoriteConditionType, favoriteConditionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(favoriteConditionType, favoriteConditionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"favorite_conditions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"favorite_conditions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into favorite_conditions")
	}

	if !cached {
		favoriteConditionInsertCacheMut.Lock()
		favoriteConditionInsertCache[key] = cache
		favoriteConditionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FavoriteCondition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FavoriteCondition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	favoriteConditionUpdateCacheMut.RLock()
	cache, cached := favoriteConditionUpdateCache[key]
	favoriteConditionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			favoriteConditionAllColumns,
			favoriteConditionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update favorite_conditions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"favorite_conditions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, favoriteConditionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(favoriteConditionType, favoriteConditionMapping, append(wl, favoriteConditionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update favorite_conditions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for favorite_conditions")
	}

	if !cached {
		favoriteConditionUpdateCacheMut.Lock()
		favoriteConditionUpdateCache[key] = cache
		favoriteConditionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q favoriteConditionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for favorite_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for favorite_conditions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FavoriteConditionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"favorite_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, favoriteConditionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in favoriteCondition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all favoriteCondition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FavoriteCondition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no favorite_conditions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(favoriteConditionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	favoriteConditionUpsertCacheMut.RLock()
	cache, cached := favoriteConditionUpsertCache[key]
	favoriteConditionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			favoriteConditionAllColumns,
			favoriteConditionColumnsWithDefault,
			favoriteConditionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			favoriteConditionAllColumns,
			favoriteConditionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert favorite_conditions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(favoriteConditionPrimaryKeyColumns))
			copy(conflict, favoriteConditionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"favorite_conditions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(favoriteConditionType, favoriteConditionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(favoriteConditionType, favoriteConditionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert favorite_conditions")
	}

	if !cached {
		favoriteConditionUpsertCacheMut.Lock()
		favoriteConditionUpsertCache[key] = cache
		favoriteConditionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FavoriteCondition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FavoriteCondition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no FavoriteCondition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), favoriteConditionPrimaryKeyMapping)
	sql := "DELETE FROM \"favorite_conditions\" WHERE \"query_conditions_id\"=$1 AND \"staffs_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from favorite_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for favorite_conditions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q favoriteConditionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no favoriteConditionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from favorite_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for favorite_conditions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FavoriteConditionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(favoriteConditionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"favorite_conditions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, favoriteConditionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from favoriteCondition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for favorite_conditions")
	}

	if len(favoriteConditionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FavoriteCondition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFavoriteCondition(ctx, exec, o.QueryConditionsID, o.StaffsID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FavoriteConditionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FavoriteConditionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), favoriteConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"favorite_conditions\".* FROM \"favorite_conditions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, favoriteConditionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in FavoriteConditionSlice")
	}

	*o = slice

	return nil
}

// FavoriteConditionExists checks if the FavoriteCondition row exists.
func FavoriteConditionExists(ctx context.Context, exec boil.ContextExecutor, queryConditionsID string, staffsID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"favorite_conditions\" where \"query_conditions_id\"=$1 AND \"staffs_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, queryConditionsID, staffsID)
	}
	row := exec.QueryRowContext(ctx, sql, queryConditionsID, staffsID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if favorite_conditions exists")
	}

	return exists, nil
}
