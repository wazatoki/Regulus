// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStaffs(t *testing.T) {
	t.Parallel()

	query := Staffs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStaffsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Staffs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaffSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StaffExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Staff exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StaffExists to return true, but got false.")
	}
}

func testStaffsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	staffFound, err := FindStaff(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if staffFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStaffsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Staffs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStaffsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Staffs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStaffsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	staffOne := &Staff{}
	staffTwo := &Staff{}
	if err = randomize.Struct(seed, staffOne, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}
	if err = randomize.Struct(seed, staffTwo, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staffOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staffTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Staffs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStaffsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	staffOne := &Staff{}
	staffTwo := &Staff{}
	if err = randomize.Struct(seed, staffOne, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}
	if err = randomize.Struct(seed, staffTwo, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staffOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staffTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func staffBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func staffAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func staffAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func staffBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func staffAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func staffBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func staffAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func staffBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func staffAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Staff) error {
	*o = Staff{}
	return nil
}

func testStaffsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Staff{}
	o := &Staff{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, staffDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Staff object: %s", err)
	}

	AddStaffHook(boil.BeforeInsertHook, staffBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	staffBeforeInsertHooks = []StaffHook{}

	AddStaffHook(boil.AfterInsertHook, staffAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	staffAfterInsertHooks = []StaffHook{}

	AddStaffHook(boil.AfterSelectHook, staffAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	staffAfterSelectHooks = []StaffHook{}

	AddStaffHook(boil.BeforeUpdateHook, staffBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	staffBeforeUpdateHooks = []StaffHook{}

	AddStaffHook(boil.AfterUpdateHook, staffAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	staffAfterUpdateHooks = []StaffHook{}

	AddStaffHook(boil.BeforeDeleteHook, staffBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	staffBeforeDeleteHooks = []StaffHook{}

	AddStaffHook(boil.AfterDeleteHook, staffAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	staffAfterDeleteHooks = []StaffHook{}

	AddStaffHook(boil.BeforeUpsertHook, staffBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	staffBeforeUpsertHooks = []StaffHook{}

	AddStaffHook(boil.AfterUpsertHook, staffAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	staffAfterUpsertHooks = []StaffHook{}
}

func testStaffsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaffsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(staffColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaffToManyStaffGroups(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c StaffGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, staffGroupDBTypes, false, staffGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffGroupDBTypes, false, staffGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"join_staffs_staff_groups\" (\"staffs_id\", \"staff_groups_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"join_staffs_staff_groups\" (\"staffs_id\", \"staff_groups_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.StaffGroups().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StaffSlice{&a}
	if err = a.L.LoadStaffGroups(ctx, tx, false, (*[]*Staff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StaffGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StaffGroups = nil
	if err = a.L.LoadStaffGroups(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StaffGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStaffToManyCreStaffQueryConditions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreStaffID, a.ID)
	queries.Assign(&c.CreStaffID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreStaffQueryConditions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreStaffID, b.CreStaffID) {
			bFound = true
		}
		if queries.Equal(v.CreStaffID, c.CreStaffID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StaffSlice{&a}
	if err = a.L.LoadCreStaffQueryConditions(ctx, tx, false, (*[]*Staff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreStaffQueryConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreStaffQueryConditions = nil
	if err = a.L.LoadCreStaffQueryConditions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreStaffQueryConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStaffToManyOwnerQueryConditions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OwnerID = a.ID
	c.OwnerID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OwnerQueryConditions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OwnerID == b.OwnerID {
			bFound = true
		}
		if v.OwnerID == c.OwnerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StaffSlice{&a}
	if err = a.L.LoadOwnerQueryConditions(ctx, tx, false, (*[]*Staff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OwnerQueryConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OwnerQueryConditions = nil
	if err = a.L.LoadOwnerQueryConditions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OwnerQueryConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStaffToManyUpdateStaffQueryConditions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.UpdateStaffID, a.ID)
	queries.Assign(&c.UpdateStaffID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UpdateStaffQueryConditions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.UpdateStaffID, b.UpdateStaffID) {
			bFound = true
		}
		if queries.Equal(v.UpdateStaffID, c.UpdateStaffID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StaffSlice{&a}
	if err = a.L.LoadUpdateStaffQueryConditions(ctx, tx, false, (*[]*Staff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpdateStaffQueryConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UpdateStaffQueryConditions = nil
	if err = a.L.LoadUpdateStaffQueryConditions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpdateStaffQueryConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStaffToManyAddOpStaffGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e StaffGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaffGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StaffGroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStaffGroups(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Staffs[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Staffs[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.StaffGroups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StaffGroups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StaffGroups().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStaffToManySetOpStaffGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e StaffGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaffGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetStaffGroups(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetStaffGroups(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Staffs) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Staffs) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Staffs[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Staffs[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.StaffGroups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.StaffGroups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStaffToManyRemoveOpStaffGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e StaffGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaffGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddStaffGroups(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveStaffGroups(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Staffs) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Staffs) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Staffs[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Staffs[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.StaffGroups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.StaffGroups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.StaffGroups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStaffToManyAddOpCreStaffQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*QueryCondition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreStaffQueryConditions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreStaffID) {
			t.Error("foreign key was wrong value", a.ID, first.CreStaffID)
		}
		if !queries.Equal(a.ID, second.CreStaffID) {
			t.Error("foreign key was wrong value", a.ID, second.CreStaffID)
		}

		if first.R.CreStaff != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CreStaff != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreStaffQueryConditions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreStaffQueryConditions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreStaffQueryConditions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStaffToManySetOpCreStaffQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreStaffQueryConditions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreStaffQueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreStaffQueryConditions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreStaffQueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreStaffID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreStaffID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreStaffID) {
		t.Error("foreign key was wrong value", a.ID, d.CreStaffID)
	}
	if !queries.Equal(a.ID, e.CreStaffID) {
		t.Error("foreign key was wrong value", a.ID, e.CreStaffID)
	}

	if b.R.CreStaff != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CreStaff != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CreStaff != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CreStaff != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreStaffQueryConditions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreStaffQueryConditions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStaffToManyRemoveOpCreStaffQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreStaffQueryConditions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreStaffQueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreStaffQueryConditions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreStaffQueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreStaffID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreStaffID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CreStaff != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CreStaff != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CreStaff != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CreStaff != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreStaffQueryConditions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreStaffQueryConditions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreStaffQueryConditions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStaffToManyAddOpOwnerQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*QueryCondition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOwnerQueryConditions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OwnerID {
			t.Error("foreign key was wrong value", a.ID, first.OwnerID)
		}
		if a.ID != second.OwnerID {
			t.Error("foreign key was wrong value", a.ID, second.OwnerID)
		}

		if first.R.Owner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Owner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OwnerQueryConditions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OwnerQueryConditions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OwnerQueryConditions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStaffToManyAddOpUpdateStaffQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*QueryCondition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUpdateStaffQueryConditions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.UpdateStaffID) {
			t.Error("foreign key was wrong value", a.ID, first.UpdateStaffID)
		}
		if !queries.Equal(a.ID, second.UpdateStaffID) {
			t.Error("foreign key was wrong value", a.ID, second.UpdateStaffID)
		}

		if first.R.UpdateStaff != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UpdateStaff != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UpdateStaffQueryConditions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UpdateStaffQueryConditions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UpdateStaffQueryConditions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStaffToManySetOpUpdateStaffQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUpdateStaffQueryConditions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UpdateStaffQueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUpdateStaffQueryConditions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UpdateStaffQueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.UpdateStaffID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.UpdateStaffID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.UpdateStaffID) {
		t.Error("foreign key was wrong value", a.ID, d.UpdateStaffID)
	}
	if !queries.Equal(a.ID, e.UpdateStaffID) {
		t.Error("foreign key was wrong value", a.ID, e.UpdateStaffID)
	}

	if b.R.UpdateStaff != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.UpdateStaff != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.UpdateStaff != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.UpdateStaff != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.UpdateStaffQueryConditions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.UpdateStaffQueryConditions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStaffToManyRemoveOpUpdateStaffQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Staff
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUpdateStaffQueryConditions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UpdateStaffQueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUpdateStaffQueryConditions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UpdateStaffQueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.UpdateStaffID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.UpdateStaffID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.UpdateStaff != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.UpdateStaff != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.UpdateStaff != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.UpdateStaff != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.UpdateStaffQueryConditions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.UpdateStaffQueryConditions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.UpdateStaffQueryConditions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStaffsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaffsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaffSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaffsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Staffs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	staffDBTypes = map[string]string{`ID`: `text`, `Del`: `boolean`, `CreatedAt`: `timestamp without time zone`, `CreStaffID`: `text`, `UpdatedAt`: `timestamp without time zone`, `UpdateStaffID`: `text`, `AccountID`: `text`, `Password`: `text`, `Name`: `text`}
	_            = bytes.MinRead
)

func testStaffsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(staffPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(staffAllColumns) == len(staffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staffDBTypes, true, staffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStaffsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(staffAllColumns) == len(staffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Staff{}
	if err = randomize.Struct(seed, o, staffDBTypes, true, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staffDBTypes, true, staffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(staffAllColumns, staffPrimaryKeyColumns) {
		fields = staffAllColumns
	} else {
		fields = strmangle.SetComplement(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StaffSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStaffsUpsert(t *testing.T) {
	t.Parallel()

	if len(staffAllColumns) == len(staffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Staff{}
	if err = randomize.Struct(seed, &o, staffDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Staff: %s", err)
	}

	count, err := Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, staffDBTypes, false, staffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Staff: %s", err)
	}

	count, err = Staffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
