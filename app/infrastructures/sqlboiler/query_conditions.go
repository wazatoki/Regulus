// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// QueryCondition is an object representing the database table.
type QueryCondition struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Del           null.Bool   `boil:"del" json:"del,omitempty" toml:"del" yaml:"del,omitempty"`
	CreatedAt     null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	CreStaffID    null.String `boil:"cre_staff_id" json:"cre_staff_id,omitempty" toml:"cre_staff_id" yaml:"cre_staff_id,omitempty"`
	UpdatedAt     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdateStaffID null.String `boil:"update_staff_id" json:"update_staff_id,omitempty" toml:"update_staff_id" yaml:"update_staff_id,omitempty"`
	PatternName   string      `boil:"pattern_name" json:"pattern_name" toml:"pattern_name" yaml:"pattern_name"`
	CategoryName  string      `boil:"category_name" json:"category_name" toml:"category_name" yaml:"category_name"`
	IsDisclose    bool        `boil:"is_disclose" json:"is_disclose" toml:"is_disclose" yaml:"is_disclose"`
	OwnerID       string      `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`

	R *queryConditionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L queryConditionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QueryConditionColumns = struct {
	ID            string
	Del           string
	CreatedAt     string
	CreStaffID    string
	UpdatedAt     string
	UpdateStaffID string
	PatternName   string
	CategoryName  string
	IsDisclose    string
	OwnerID       string
}{
	ID:            "id",
	Del:           "del",
	CreatedAt:     "created_at",
	CreStaffID:    "cre_staff_id",
	UpdatedAt:     "updated_at",
	UpdateStaffID: "update_staff_id",
	PatternName:   "pattern_name",
	CategoryName:  "category_name",
	IsDisclose:    "is_disclose",
	OwnerID:       "owner_id",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var QueryConditionWhere = struct {
	ID            whereHelperstring
	Del           whereHelpernull_Bool
	CreatedAt     whereHelpernull_Time
	CreStaffID    whereHelpernull_String
	UpdatedAt     whereHelpernull_Time
	UpdateStaffID whereHelpernull_String
	PatternName   whereHelperstring
	CategoryName  whereHelperstring
	IsDisclose    whereHelperbool
	OwnerID       whereHelperstring
}{
	ID:            whereHelperstring{field: "\"query_conditions\".\"id\""},
	Del:           whereHelpernull_Bool{field: "\"query_conditions\".\"del\""},
	CreatedAt:     whereHelpernull_Time{field: "\"query_conditions\".\"created_at\""},
	CreStaffID:    whereHelpernull_String{field: "\"query_conditions\".\"cre_staff_id\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"query_conditions\".\"updated_at\""},
	UpdateStaffID: whereHelpernull_String{field: "\"query_conditions\".\"update_staff_id\""},
	PatternName:   whereHelperstring{field: "\"query_conditions\".\"pattern_name\""},
	CategoryName:  whereHelperstring{field: "\"query_conditions\".\"category_name\""},
	IsDisclose:    whereHelperbool{field: "\"query_conditions\".\"is_disclose\""},
	OwnerID:       whereHelperstring{field: "\"query_conditions\".\"owner_id\""},
}

// QueryConditionRels is where relationship names are stored.
var QueryConditionRels = struct {
	CreStaff                  string
	Owner                     string
	UpdateStaff               string
	StaffGroups               string
	QueryDisplayItems         string
	QueryOrderConditionItems  string
	QuerySearchConditionItems string
}{
	CreStaff:                  "CreStaff",
	Owner:                     "Owner",
	UpdateStaff:               "UpdateStaff",
	StaffGroups:               "StaffGroups",
	QueryDisplayItems:         "QueryDisplayItems",
	QueryOrderConditionItems:  "QueryOrderConditionItems",
	QuerySearchConditionItems: "QuerySearchConditionItems",
}

// queryConditionR is where relationships are stored.
type queryConditionR struct {
	CreStaff                  *Staff
	Owner                     *Staff
	UpdateStaff               *Staff
	StaffGroups               StaffGroupSlice
	QueryDisplayItems         QueryDisplayItemSlice
	QueryOrderConditionItems  QueryOrderConditionItemSlice
	QuerySearchConditionItems QuerySearchConditionItemSlice
}

// NewStruct creates a new relationship struct
func (*queryConditionR) NewStruct() *queryConditionR {
	return &queryConditionR{}
}

// queryConditionL is where Load methods for each relationship are stored.
type queryConditionL struct{}

var (
	queryConditionAllColumns            = []string{"id", "del", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "pattern_name", "category_name", "is_disclose", "owner_id"}
	queryConditionColumnsWithoutDefault = []string{"id", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "pattern_name", "category_name", "is_disclose", "owner_id"}
	queryConditionColumnsWithDefault    = []string{"del"}
	queryConditionPrimaryKeyColumns     = []string{"id"}
)

type (
	// QueryConditionSlice is an alias for a slice of pointers to QueryCondition.
	// This should generally be used opposed to []QueryCondition.
	QueryConditionSlice []*QueryCondition
	// QueryConditionHook is the signature for custom QueryCondition hook methods
	QueryConditionHook func(context.Context, boil.ContextExecutor, *QueryCondition) error

	queryConditionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	queryConditionType                 = reflect.TypeOf(&QueryCondition{})
	queryConditionMapping              = queries.MakeStructMapping(queryConditionType)
	queryConditionPrimaryKeyMapping, _ = queries.BindMapping(queryConditionType, queryConditionMapping, queryConditionPrimaryKeyColumns)
	queryConditionInsertCacheMut       sync.RWMutex
	queryConditionInsertCache          = make(map[string]insertCache)
	queryConditionUpdateCacheMut       sync.RWMutex
	queryConditionUpdateCache          = make(map[string]updateCache)
	queryConditionUpsertCacheMut       sync.RWMutex
	queryConditionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var queryConditionBeforeInsertHooks []QueryConditionHook
var queryConditionBeforeUpdateHooks []QueryConditionHook
var queryConditionBeforeDeleteHooks []QueryConditionHook
var queryConditionBeforeUpsertHooks []QueryConditionHook

var queryConditionAfterInsertHooks []QueryConditionHook
var queryConditionAfterSelectHooks []QueryConditionHook
var queryConditionAfterUpdateHooks []QueryConditionHook
var queryConditionAfterDeleteHooks []QueryConditionHook
var queryConditionAfterUpsertHooks []QueryConditionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *QueryCondition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *QueryCondition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *QueryCondition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *QueryCondition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *QueryCondition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *QueryCondition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *QueryCondition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *QueryCondition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *QueryCondition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQueryConditionHook registers your hook function for all future operations.
func AddQueryConditionHook(hookPoint boil.HookPoint, queryConditionHook QueryConditionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		queryConditionBeforeInsertHooks = append(queryConditionBeforeInsertHooks, queryConditionHook)
	case boil.BeforeUpdateHook:
		queryConditionBeforeUpdateHooks = append(queryConditionBeforeUpdateHooks, queryConditionHook)
	case boil.BeforeDeleteHook:
		queryConditionBeforeDeleteHooks = append(queryConditionBeforeDeleteHooks, queryConditionHook)
	case boil.BeforeUpsertHook:
		queryConditionBeforeUpsertHooks = append(queryConditionBeforeUpsertHooks, queryConditionHook)
	case boil.AfterInsertHook:
		queryConditionAfterInsertHooks = append(queryConditionAfterInsertHooks, queryConditionHook)
	case boil.AfterSelectHook:
		queryConditionAfterSelectHooks = append(queryConditionAfterSelectHooks, queryConditionHook)
	case boil.AfterUpdateHook:
		queryConditionAfterUpdateHooks = append(queryConditionAfterUpdateHooks, queryConditionHook)
	case boil.AfterDeleteHook:
		queryConditionAfterDeleteHooks = append(queryConditionAfterDeleteHooks, queryConditionHook)
	case boil.AfterUpsertHook:
		queryConditionAfterUpsertHooks = append(queryConditionAfterUpsertHooks, queryConditionHook)
	}
}

// One returns a single queryCondition record from the query.
func (q queryConditionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*QueryCondition, error) {
	o := &QueryCondition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for query_conditions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all QueryCondition records from the query.
func (q queryConditionQuery) All(ctx context.Context, exec boil.ContextExecutor) (QueryConditionSlice, error) {
	var o []*QueryCondition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to QueryCondition slice")
	}

	if len(queryConditionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all QueryCondition records in the query.
func (q queryConditionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count query_conditions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q queryConditionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if query_conditions exists")
	}

	return count > 0, nil
}

// CreStaff pointed to by the foreign key.
func (o *QueryCondition) CreStaff(mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreStaffID),
	}

	queryMods = append(queryMods, mods...)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staffs\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *QueryCondition) Owner(mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staffs\"")

	return query
}

// UpdateStaff pointed to by the foreign key.
func (o *QueryCondition) UpdateStaff(mods ...qm.QueryMod) staffQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdateStaffID),
	}

	queryMods = append(queryMods, mods...)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staffs\"")

	return query
}

// StaffGroups retrieves all the staff_group's StaffGroups with an executor.
func (o *QueryCondition) StaffGroups(mods ...qm.QueryMod) staffGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"join_query_conditions_staff_groups\" on \"staff_groups\".\"id\" = \"join_query_conditions_staff_groups\".\"staff_groups_id\""),
		qm.Where("\"join_query_conditions_staff_groups\".\"query_conditions_id\"=?", o.ID),
	)

	query := StaffGroups(queryMods...)
	queries.SetFrom(query.Query, "\"staff_groups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"staff_groups\".*"})
	}

	return query
}

// QueryDisplayItems retrieves all the query_display_item's QueryDisplayItems with an executor.
func (o *QueryCondition) QueryDisplayItems(mods ...qm.QueryMod) queryDisplayItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"query_display_items\".\"query_conditions_id\"=?", o.ID),
	)

	query := QueryDisplayItems(queryMods...)
	queries.SetFrom(query.Query, "\"query_display_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"query_display_items\".*"})
	}

	return query
}

// QueryOrderConditionItems retrieves all the query_order_condition_item's QueryOrderConditionItems with an executor.
func (o *QueryCondition) QueryOrderConditionItems(mods ...qm.QueryMod) queryOrderConditionItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"query_order_condition_items\".\"query_conditions_id\"=?", o.ID),
	)

	query := QueryOrderConditionItems(queryMods...)
	queries.SetFrom(query.Query, "\"query_order_condition_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"query_order_condition_items\".*"})
	}

	return query
}

// QuerySearchConditionItems retrieves all the query_search_condition_item's QuerySearchConditionItems with an executor.
func (o *QueryCondition) QuerySearchConditionItems(mods ...qm.QueryMod) querySearchConditionItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"query_search_condition_items\".\"query_conditions_id\"=?", o.ID),
	)

	query := QuerySearchConditionItems(queryMods...)
	queries.SetFrom(query.Query, "\"query_search_condition_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"query_search_condition_items\".*"})
	}

	return query
}

// LoadCreStaff allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (queryConditionL) LoadCreStaff(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQueryCondition interface{}, mods queries.Applicator) error {
	var slice []*QueryCondition
	var object *QueryCondition

	if singular {
		object = maybeQueryCondition.(*QueryCondition)
	} else {
		slice = *maybeQueryCondition.(*[]*QueryCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &queryConditionR{}
		}
		if !queries.IsNil(object.CreStaffID) {
			args = append(args, object.CreStaffID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &queryConditionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreStaffID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreStaffID) {
				args = append(args, obj.CreStaffID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`staffs`), qm.WhereIn(`staffs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(queryConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreStaff = foreign
		if foreign.R == nil {
			foreign.R = &staffR{}
		}
		foreign.R.CreStaffQueryConditions = append(foreign.R.CreStaffQueryConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreStaffID, foreign.ID) {
				local.R.CreStaff = foreign
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.CreStaffQueryConditions = append(foreign.R.CreStaffQueryConditions, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (queryConditionL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQueryCondition interface{}, mods queries.Applicator) error {
	var slice []*QueryCondition
	var object *QueryCondition

	if singular {
		object = maybeQueryCondition.(*QueryCondition)
	} else {
		slice = *maybeQueryCondition.(*[]*QueryCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &queryConditionR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &queryConditionR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`staffs`), qm.WhereIn(`staffs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(queryConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &staffR{}
		}
		foreign.R.OwnerQueryConditions = append(foreign.R.OwnerQueryConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.OwnerQueryConditions = append(foreign.R.OwnerQueryConditions, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdateStaff allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (queryConditionL) LoadUpdateStaff(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQueryCondition interface{}, mods queries.Applicator) error {
	var slice []*QueryCondition
	var object *QueryCondition

	if singular {
		object = maybeQueryCondition.(*QueryCondition)
	} else {
		slice = *maybeQueryCondition.(*[]*QueryCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &queryConditionR{}
		}
		if !queries.IsNil(object.UpdateStaffID) {
			args = append(args, object.UpdateStaffID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &queryConditionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UpdateStaffID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UpdateStaffID) {
				args = append(args, obj.UpdateStaffID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`staffs`), qm.WhereIn(`staffs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Staff")
	}

	var resultSlice []*Staff
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Staff")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(queryConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdateStaff = foreign
		if foreign.R == nil {
			foreign.R = &staffR{}
		}
		foreign.R.UpdateStaffQueryConditions = append(foreign.R.UpdateStaffQueryConditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UpdateStaffID, foreign.ID) {
				local.R.UpdateStaff = foreign
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.UpdateStaffQueryConditions = append(foreign.R.UpdateStaffQueryConditions, local)
				break
			}
		}
	}

	return nil
}

// LoadStaffGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (queryConditionL) LoadStaffGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQueryCondition interface{}, mods queries.Applicator) error {
	var slice []*QueryCondition
	var object *QueryCondition

	if singular {
		object = maybeQueryCondition.(*QueryCondition)
	} else {
		slice = *maybeQueryCondition.(*[]*QueryCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &queryConditionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &queryConditionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"staff_groups\".*, \"a\".\"query_conditions_id\""),
		qm.From("\"staff_groups\""),
		qm.InnerJoin("\"join_query_conditions_staff_groups\" as \"a\" on \"staff_groups\".\"id\" = \"a\".\"staff_groups_id\""),
		qm.WhereIn("\"a\".\"query_conditions_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staff_groups")
	}

	var resultSlice []*StaffGroup

	var localJoinCols []string
	for results.Next() {
		one := new(StaffGroup)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Del, &one.CreatedAt, &one.CreStaffID, &one.UpdatedAt, &one.UpdateStaffID, &one.StaffID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for staff_groups")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice staff_groups")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staff_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staff_groups")
	}

	if len(staffGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StaffGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staffGroupR{}
			}
			foreign.R.QueryConditions = append(foreign.R.QueryConditions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.StaffGroups = append(local.R.StaffGroups, foreign)
				if foreign.R == nil {
					foreign.R = &staffGroupR{}
				}
				foreign.R.QueryConditions = append(foreign.R.QueryConditions, local)
				break
			}
		}
	}

	return nil
}

// LoadQueryDisplayItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (queryConditionL) LoadQueryDisplayItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQueryCondition interface{}, mods queries.Applicator) error {
	var slice []*QueryCondition
	var object *QueryCondition

	if singular {
		object = maybeQueryCondition.(*QueryCondition)
	} else {
		slice = *maybeQueryCondition.(*[]*QueryCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &queryConditionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &queryConditionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`query_display_items`), qm.WhereIn(`query_display_items.query_conditions_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load query_display_items")
	}

	var resultSlice []*QueryDisplayItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice query_display_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on query_display_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_display_items")
	}

	if len(queryDisplayItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QueryDisplayItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &queryDisplayItemR{}
			}
			foreign.R.QueryCondition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.QueryConditionsID {
				local.R.QueryDisplayItems = append(local.R.QueryDisplayItems, foreign)
				if foreign.R == nil {
					foreign.R = &queryDisplayItemR{}
				}
				foreign.R.QueryCondition = local
				break
			}
		}
	}

	return nil
}

// LoadQueryOrderConditionItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (queryConditionL) LoadQueryOrderConditionItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQueryCondition interface{}, mods queries.Applicator) error {
	var slice []*QueryCondition
	var object *QueryCondition

	if singular {
		object = maybeQueryCondition.(*QueryCondition)
	} else {
		slice = *maybeQueryCondition.(*[]*QueryCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &queryConditionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &queryConditionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`query_order_condition_items`), qm.WhereIn(`query_order_condition_items.query_conditions_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load query_order_condition_items")
	}

	var resultSlice []*QueryOrderConditionItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice query_order_condition_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on query_order_condition_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_order_condition_items")
	}

	if len(queryOrderConditionItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QueryOrderConditionItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &queryOrderConditionItemR{}
			}
			foreign.R.QueryCondition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.QueryConditionsID {
				local.R.QueryOrderConditionItems = append(local.R.QueryOrderConditionItems, foreign)
				if foreign.R == nil {
					foreign.R = &queryOrderConditionItemR{}
				}
				foreign.R.QueryCondition = local
				break
			}
		}
	}

	return nil
}

// LoadQuerySearchConditionItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (queryConditionL) LoadQuerySearchConditionItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQueryCondition interface{}, mods queries.Applicator) error {
	var slice []*QueryCondition
	var object *QueryCondition

	if singular {
		object = maybeQueryCondition.(*QueryCondition)
	} else {
		slice = *maybeQueryCondition.(*[]*QueryCondition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &queryConditionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &queryConditionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`query_search_condition_items`), qm.WhereIn(`query_search_condition_items.query_conditions_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load query_search_condition_items")
	}

	var resultSlice []*QuerySearchConditionItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice query_search_condition_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on query_search_condition_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_search_condition_items")
	}

	if len(querySearchConditionItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuerySearchConditionItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &querySearchConditionItemR{}
			}
			foreign.R.QueryCondition = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.QueryConditionsID {
				local.R.QuerySearchConditionItems = append(local.R.QuerySearchConditionItems, foreign)
				if foreign.R == nil {
					foreign.R = &querySearchConditionItemR{}
				}
				foreign.R.QueryCondition = local
				break
			}
		}
	}

	return nil
}

// SetCreStaff of the queryCondition to the related item.
// Sets o.R.CreStaff to related.
// Adds o to related.R.CreStaffQueryConditions.
func (o *QueryCondition) SetCreStaff(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"query_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cre_staff_id"}),
		strmangle.WhereClause("\"", "\"", 2, queryConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreStaffID, related.ID)
	if o.R == nil {
		o.R = &queryConditionR{
			CreStaff: related,
		}
	} else {
		o.R.CreStaff = related
	}

	if related.R == nil {
		related.R = &staffR{
			CreStaffQueryConditions: QueryConditionSlice{o},
		}
	} else {
		related.R.CreStaffQueryConditions = append(related.R.CreStaffQueryConditions, o)
	}

	return nil
}

// RemoveCreStaff relationship.
// Sets o.R.CreStaff to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *QueryCondition) RemoveCreStaff(ctx context.Context, exec boil.ContextExecutor, related *Staff) error {
	var err error

	queries.SetScanner(&o.CreStaffID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("cre_staff_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.CreStaff = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreStaffQueryConditions {
		if queries.Equal(o.CreStaffID, ri.CreStaffID) {
			continue
		}

		ln := len(related.R.CreStaffQueryConditions)
		if ln > 1 && i < ln-1 {
			related.R.CreStaffQueryConditions[i] = related.R.CreStaffQueryConditions[ln-1]
		}
		related.R.CreStaffQueryConditions = related.R.CreStaffQueryConditions[:ln-1]
		break
	}
	return nil
}

// SetOwner of the queryCondition to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerQueryConditions.
func (o *QueryCondition) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"query_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, queryConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &queryConditionR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &staffR{
			OwnerQueryConditions: QueryConditionSlice{o},
		}
	} else {
		related.R.OwnerQueryConditions = append(related.R.OwnerQueryConditions, o)
	}

	return nil
}

// SetUpdateStaff of the queryCondition to the related item.
// Sets o.R.UpdateStaff to related.
// Adds o to related.R.UpdateStaffQueryConditions.
func (o *QueryCondition) SetUpdateStaff(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Staff) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"query_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"update_staff_id"}),
		strmangle.WhereClause("\"", "\"", 2, queryConditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UpdateStaffID, related.ID)
	if o.R == nil {
		o.R = &queryConditionR{
			UpdateStaff: related,
		}
	} else {
		o.R.UpdateStaff = related
	}

	if related.R == nil {
		related.R = &staffR{
			UpdateStaffQueryConditions: QueryConditionSlice{o},
		}
	} else {
		related.R.UpdateStaffQueryConditions = append(related.R.UpdateStaffQueryConditions, o)
	}

	return nil
}

// RemoveUpdateStaff relationship.
// Sets o.R.UpdateStaff to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *QueryCondition) RemoveUpdateStaff(ctx context.Context, exec boil.ContextExecutor, related *Staff) error {
	var err error

	queries.SetScanner(&o.UpdateStaffID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("update_staff_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.UpdateStaff = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UpdateStaffQueryConditions {
		if queries.Equal(o.UpdateStaffID, ri.UpdateStaffID) {
			continue
		}

		ln := len(related.R.UpdateStaffQueryConditions)
		if ln > 1 && i < ln-1 {
			related.R.UpdateStaffQueryConditions[i] = related.R.UpdateStaffQueryConditions[ln-1]
		}
		related.R.UpdateStaffQueryConditions = related.R.UpdateStaffQueryConditions[:ln-1]
		break
	}
	return nil
}

// AddStaffGroups adds the given related objects to the existing relationships
// of the query_condition, optionally inserting them as new records.
// Appends related to o.R.StaffGroups.
// Sets related.R.QueryConditions appropriately.
func (o *QueryCondition) AddStaffGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StaffGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"join_query_conditions_staff_groups\" (\"query_conditions_id\", \"staff_groups_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &queryConditionR{
			StaffGroups: related,
		}
	} else {
		o.R.StaffGroups = append(o.R.StaffGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffGroupR{
				QueryConditions: QueryConditionSlice{o},
			}
		} else {
			rel.R.QueryConditions = append(rel.R.QueryConditions, o)
		}
	}
	return nil
}

// SetStaffGroups removes all previously related items of the
// query_condition replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.QueryConditions's StaffGroups accordingly.
// Replaces o.R.StaffGroups with related.
// Sets related.R.QueryConditions's StaffGroups accordingly.
func (o *QueryCondition) SetStaffGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StaffGroup) error {
	query := "delete from \"join_query_conditions_staff_groups\" where \"query_conditions_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeStaffGroupsFromQueryConditionsSlice(o, related)
	if o.R != nil {
		o.R.StaffGroups = nil
	}
	return o.AddStaffGroups(ctx, exec, insert, related...)
}

// RemoveStaffGroups relationships from objects passed in.
// Removes related items from R.StaffGroups (uses pointer comparison, removal does not keep order)
// Sets related.R.QueryConditions.
func (o *QueryCondition) RemoveStaffGroups(ctx context.Context, exec boil.ContextExecutor, related ...*StaffGroup) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"join_query_conditions_staff_groups\" where \"query_conditions_id\" = $1 and \"staff_groups_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeStaffGroupsFromQueryConditionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StaffGroups {
			if rel != ri {
				continue
			}

			ln := len(o.R.StaffGroups)
			if ln > 1 && i < ln-1 {
				o.R.StaffGroups[i] = o.R.StaffGroups[ln-1]
			}
			o.R.StaffGroups = o.R.StaffGroups[:ln-1]
			break
		}
	}

	return nil
}

func removeStaffGroupsFromQueryConditionsSlice(o *QueryCondition, related []*StaffGroup) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.QueryConditions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.QueryConditions)
			if ln > 1 && i < ln-1 {
				rel.R.QueryConditions[i] = rel.R.QueryConditions[ln-1]
			}
			rel.R.QueryConditions = rel.R.QueryConditions[:ln-1]
			break
		}
	}
}

// AddQueryDisplayItems adds the given related objects to the existing relationships
// of the query_condition, optionally inserting them as new records.
// Appends related to o.R.QueryDisplayItems.
// Sets related.R.QueryCondition appropriately.
func (o *QueryCondition) AddQueryDisplayItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryDisplayItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QueryConditionsID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"query_display_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"query_conditions_id"}),
				strmangle.WhereClause("\"", "\"", 2, queryDisplayItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QueryConditionsID = o.ID
		}
	}

	if o.R == nil {
		o.R = &queryConditionR{
			QueryDisplayItems: related,
		}
	} else {
		o.R.QueryDisplayItems = append(o.R.QueryDisplayItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &queryDisplayItemR{
				QueryCondition: o,
			}
		} else {
			rel.R.QueryCondition = o
		}
	}
	return nil
}

// AddQueryOrderConditionItems adds the given related objects to the existing relationships
// of the query_condition, optionally inserting them as new records.
// Appends related to o.R.QueryOrderConditionItems.
// Sets related.R.QueryCondition appropriately.
func (o *QueryCondition) AddQueryOrderConditionItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryOrderConditionItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QueryConditionsID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"query_order_condition_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"query_conditions_id"}),
				strmangle.WhereClause("\"", "\"", 2, queryOrderConditionItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QueryConditionsID = o.ID
		}
	}

	if o.R == nil {
		o.R = &queryConditionR{
			QueryOrderConditionItems: related,
		}
	} else {
		o.R.QueryOrderConditionItems = append(o.R.QueryOrderConditionItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &queryOrderConditionItemR{
				QueryCondition: o,
			}
		} else {
			rel.R.QueryCondition = o
		}
	}
	return nil
}

// AddQuerySearchConditionItems adds the given related objects to the existing relationships
// of the query_condition, optionally inserting them as new records.
// Appends related to o.R.QuerySearchConditionItems.
// Sets related.R.QueryCondition appropriately.
func (o *QueryCondition) AddQuerySearchConditionItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QuerySearchConditionItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QueryConditionsID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"query_search_condition_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"query_conditions_id"}),
				strmangle.WhereClause("\"", "\"", 2, querySearchConditionItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QueryConditionsID = o.ID
		}
	}

	if o.R == nil {
		o.R = &queryConditionR{
			QuerySearchConditionItems: related,
		}
	} else {
		o.R.QuerySearchConditionItems = append(o.R.QuerySearchConditionItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &querySearchConditionItemR{
				QueryCondition: o,
			}
		} else {
			rel.R.QueryCondition = o
		}
	}
	return nil
}

// QueryConditions retrieves all the records using an executor.
func QueryConditions(mods ...qm.QueryMod) queryConditionQuery {
	mods = append(mods, qm.From("\"query_conditions\""))
	return queryConditionQuery{NewQuery(mods...)}
}

// FindQueryCondition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQueryCondition(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*QueryCondition, error) {
	queryConditionObj := &QueryCondition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"query_conditions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, queryConditionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from query_conditions")
	}

	return queryConditionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *QueryCondition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no query_conditions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(queryConditionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	queryConditionInsertCacheMut.RLock()
	cache, cached := queryConditionInsertCache[key]
	queryConditionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			queryConditionAllColumns,
			queryConditionColumnsWithDefault,
			queryConditionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(queryConditionType, queryConditionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(queryConditionType, queryConditionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"query_conditions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"query_conditions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into query_conditions")
	}

	if !cached {
		queryConditionInsertCacheMut.Lock()
		queryConditionInsertCache[key] = cache
		queryConditionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the QueryCondition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *QueryCondition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	queryConditionUpdateCacheMut.RLock()
	cache, cached := queryConditionUpdateCache[key]
	queryConditionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			queryConditionAllColumns,
			queryConditionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update query_conditions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"query_conditions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, queryConditionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(queryConditionType, queryConditionMapping, append(wl, queryConditionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update query_conditions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for query_conditions")
	}

	if !cached {
		queryConditionUpdateCacheMut.Lock()
		queryConditionUpdateCache[key] = cache
		queryConditionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q queryConditionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for query_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for query_conditions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QueryConditionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"query_conditions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, queryConditionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in queryCondition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all queryCondition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *QueryCondition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no query_conditions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(queryConditionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	queryConditionUpsertCacheMut.RLock()
	cache, cached := queryConditionUpsertCache[key]
	queryConditionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			queryConditionAllColumns,
			queryConditionColumnsWithDefault,
			queryConditionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			queryConditionAllColumns,
			queryConditionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert query_conditions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(queryConditionPrimaryKeyColumns))
			copy(conflict, queryConditionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"query_conditions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(queryConditionType, queryConditionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(queryConditionType, queryConditionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert query_conditions")
	}

	if !cached {
		queryConditionUpsertCacheMut.Lock()
		queryConditionUpsertCache[key] = cache
		queryConditionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single QueryCondition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *QueryCondition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no QueryCondition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), queryConditionPrimaryKeyMapping)
	sql := "DELETE FROM \"query_conditions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from query_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for query_conditions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q queryConditionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no queryConditionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from query_conditions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for query_conditions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QueryConditionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(queryConditionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"query_conditions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, queryConditionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from queryCondition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for query_conditions")
	}

	if len(queryConditionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *QueryCondition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindQueryCondition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QueryConditionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QueryConditionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryConditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"query_conditions\".* FROM \"query_conditions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, queryConditionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in QueryConditionSlice")
	}

	*o = slice

	return nil
}

// QueryConditionExists checks if the QueryCondition row exists.
func QueryConditionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"query_conditions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if query_conditions exists")
	}

	return exists, nil
}
