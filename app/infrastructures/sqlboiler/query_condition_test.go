// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQueryConditions(t *testing.T) {
	t.Parallel()

	query := QueryConditions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQueryConditionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := QueryConditions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryConditionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QueryConditionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if QueryCondition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QueryConditionExists to return true, but got false.")
	}
}

func testQueryConditionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	queryConditionFound, err := FindQueryCondition(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if queryConditionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQueryConditionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = QueryConditions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testQueryConditionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := QueryConditions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQueryConditionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	queryConditionOne := &QueryCondition{}
	queryConditionTwo := &QueryCondition{}
	if err = randomize.Struct(seed, queryConditionOne, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, queryConditionTwo, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queryConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQueryConditionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	queryConditionOne := &QueryCondition{}
	queryConditionTwo := &QueryCondition{}
	if err = randomize.Struct(seed, queryConditionOne, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, queryConditionTwo, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queryConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func queryConditionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func testQueryConditionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &QueryCondition{}
	o := &QueryCondition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, queryConditionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize QueryCondition object: %s", err)
	}

	AddQueryConditionHook(boil.BeforeInsertHook, queryConditionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	queryConditionBeforeInsertHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterInsertHook, queryConditionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterInsertHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterSelectHook, queryConditionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterSelectHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.BeforeUpdateHook, queryConditionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	queryConditionBeforeUpdateHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterUpdateHook, queryConditionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterUpdateHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.BeforeDeleteHook, queryConditionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	queryConditionBeforeDeleteHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterDeleteHook, queryConditionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterDeleteHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.BeforeUpsertHook, queryConditionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	queryConditionBeforeUpsertHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterUpsertHook, queryConditionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterUpsertHooks = []QueryConditionHook{}
}

func testQueryConditionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryConditionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(queryConditionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryConditionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueryConditionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryConditionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueryConditionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	queryConditionDBTypes = map[string]string{`ID`: `text`, `Del`: `boolean`, `CreatedAt`: `timestamp without time zone`, `CreStaffID`: `text`, `UpdatedAt`: `timestamp without time zone`, `UpdateStaffID`: `text`, `PatternName`: `text`, `CategoryName`: `text`, `IsDisclose`: `boolean`, `OwnerID`: `text`}
	_                     = bytes.MinRead
)

func testQueryConditionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(queryConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(queryConditionAllColumns) == len(queryConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQueryConditionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(queryConditionAllColumns) == len(queryConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(queryConditionAllColumns, queryConditionPrimaryKeyColumns) {
		fields = queryConditionAllColumns
	} else {
		fields = strmangle.SetComplement(
			queryConditionAllColumns,
			queryConditionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QueryConditionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQueryConditionsUpsert(t *testing.T) {
	t.Parallel()

	if len(queryConditionAllColumns) == len(queryConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := QueryCondition{}
	if err = randomize.Struct(seed, &o, queryConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryCondition: %s", err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, queryConditionDBTypes, false, queryConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryCondition: %s", err)
	}

	count, err = QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
