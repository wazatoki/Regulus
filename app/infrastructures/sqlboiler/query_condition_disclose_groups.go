// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// QueryConditionDiscloseGroup is an object representing the database table.
type QueryConditionDiscloseGroup struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Del              null.Bool   `boil:"del" json:"del,omitempty" toml:"del" yaml:"del,omitempty"`
	CreatedAt        null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	CreStaffID       null.String `boil:"cre_staff_id" json:"cre_staff_id,omitempty" toml:"cre_staff_id" yaml:"cre_staff_id,omitempty"`
	UpdatedAt        null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdateStaffID    null.String `boil:"update_staff_id" json:"update_staff_id,omitempty" toml:"update_staff_id" yaml:"update_staff_id,omitempty"`
	QueryConditionID null.String `boil:"query_condition_id" json:"query_condition_id,omitempty" toml:"query_condition_id" yaml:"query_condition_id,omitempty"`
	GroupID          null.String `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`

	R *queryConditionDiscloseGroupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L queryConditionDiscloseGroupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QueryConditionDiscloseGroupColumns = struct {
	ID               string
	Del              string
	CreatedAt        string
	CreStaffID       string
	UpdatedAt        string
	UpdateStaffID    string
	QueryConditionID string
	GroupID          string
}{
	ID:               "id",
	Del:              "del",
	CreatedAt:        "created_at",
	CreStaffID:       "cre_staff_id",
	UpdatedAt:        "updated_at",
	UpdateStaffID:    "update_staff_id",
	QueryConditionID: "query_condition_id",
	GroupID:          "group_id",
}

// Generated where

var QueryConditionDiscloseGroupWhere = struct {
	ID               whereHelperstring
	Del              whereHelpernull_Bool
	CreatedAt        whereHelpernull_Time
	CreStaffID       whereHelpernull_String
	UpdatedAt        whereHelpernull_Time
	UpdateStaffID    whereHelpernull_String
	QueryConditionID whereHelpernull_String
	GroupID          whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"query_condition_disclose_groups\".\"id\""},
	Del:              whereHelpernull_Bool{field: "\"query_condition_disclose_groups\".\"del\""},
	CreatedAt:        whereHelpernull_Time{field: "\"query_condition_disclose_groups\".\"created_at\""},
	CreStaffID:       whereHelpernull_String{field: "\"query_condition_disclose_groups\".\"cre_staff_id\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"query_condition_disclose_groups\".\"updated_at\""},
	UpdateStaffID:    whereHelpernull_String{field: "\"query_condition_disclose_groups\".\"update_staff_id\""},
	QueryConditionID: whereHelpernull_String{field: "\"query_condition_disclose_groups\".\"query_condition_id\""},
	GroupID:          whereHelpernull_String{field: "\"query_condition_disclose_groups\".\"group_id\""},
}

// QueryConditionDiscloseGroupRels is where relationship names are stored.
var QueryConditionDiscloseGroupRels = struct {
}{}

// queryConditionDiscloseGroupR is where relationships are stored.
type queryConditionDiscloseGroupR struct {
}

// NewStruct creates a new relationship struct
func (*queryConditionDiscloseGroupR) NewStruct() *queryConditionDiscloseGroupR {
	return &queryConditionDiscloseGroupR{}
}

// queryConditionDiscloseGroupL is where Load methods for each relationship are stored.
type queryConditionDiscloseGroupL struct{}

var (
	queryConditionDiscloseGroupAllColumns            = []string{"id", "del", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "query_condition_id", "group_id"}
	queryConditionDiscloseGroupColumnsWithoutDefault = []string{"id", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "query_condition_id", "group_id"}
	queryConditionDiscloseGroupColumnsWithDefault    = []string{"del"}
	queryConditionDiscloseGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// QueryConditionDiscloseGroupSlice is an alias for a slice of pointers to QueryConditionDiscloseGroup.
	// This should generally be used opposed to []QueryConditionDiscloseGroup.
	QueryConditionDiscloseGroupSlice []*QueryConditionDiscloseGroup
	// QueryConditionDiscloseGroupHook is the signature for custom QueryConditionDiscloseGroup hook methods
	QueryConditionDiscloseGroupHook func(context.Context, boil.ContextExecutor, *QueryConditionDiscloseGroup) error

	queryConditionDiscloseGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	queryConditionDiscloseGroupType                 = reflect.TypeOf(&QueryConditionDiscloseGroup{})
	queryConditionDiscloseGroupMapping              = queries.MakeStructMapping(queryConditionDiscloseGroupType)
	queryConditionDiscloseGroupPrimaryKeyMapping, _ = queries.BindMapping(queryConditionDiscloseGroupType, queryConditionDiscloseGroupMapping, queryConditionDiscloseGroupPrimaryKeyColumns)
	queryConditionDiscloseGroupInsertCacheMut       sync.RWMutex
	queryConditionDiscloseGroupInsertCache          = make(map[string]insertCache)
	queryConditionDiscloseGroupUpdateCacheMut       sync.RWMutex
	queryConditionDiscloseGroupUpdateCache          = make(map[string]updateCache)
	queryConditionDiscloseGroupUpsertCacheMut       sync.RWMutex
	queryConditionDiscloseGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var queryConditionDiscloseGroupBeforeInsertHooks []QueryConditionDiscloseGroupHook
var queryConditionDiscloseGroupBeforeUpdateHooks []QueryConditionDiscloseGroupHook
var queryConditionDiscloseGroupBeforeDeleteHooks []QueryConditionDiscloseGroupHook
var queryConditionDiscloseGroupBeforeUpsertHooks []QueryConditionDiscloseGroupHook

var queryConditionDiscloseGroupAfterInsertHooks []QueryConditionDiscloseGroupHook
var queryConditionDiscloseGroupAfterSelectHooks []QueryConditionDiscloseGroupHook
var queryConditionDiscloseGroupAfterUpdateHooks []QueryConditionDiscloseGroupHook
var queryConditionDiscloseGroupAfterDeleteHooks []QueryConditionDiscloseGroupHook
var queryConditionDiscloseGroupAfterUpsertHooks []QueryConditionDiscloseGroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *QueryConditionDiscloseGroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *QueryConditionDiscloseGroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *QueryConditionDiscloseGroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *QueryConditionDiscloseGroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *QueryConditionDiscloseGroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *QueryConditionDiscloseGroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *QueryConditionDiscloseGroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *QueryConditionDiscloseGroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *QueryConditionDiscloseGroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryConditionDiscloseGroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQueryConditionDiscloseGroupHook registers your hook function for all future operations.
func AddQueryConditionDiscloseGroupHook(hookPoint boil.HookPoint, queryConditionDiscloseGroupHook QueryConditionDiscloseGroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		queryConditionDiscloseGroupBeforeInsertHooks = append(queryConditionDiscloseGroupBeforeInsertHooks, queryConditionDiscloseGroupHook)
	case boil.BeforeUpdateHook:
		queryConditionDiscloseGroupBeforeUpdateHooks = append(queryConditionDiscloseGroupBeforeUpdateHooks, queryConditionDiscloseGroupHook)
	case boil.BeforeDeleteHook:
		queryConditionDiscloseGroupBeforeDeleteHooks = append(queryConditionDiscloseGroupBeforeDeleteHooks, queryConditionDiscloseGroupHook)
	case boil.BeforeUpsertHook:
		queryConditionDiscloseGroupBeforeUpsertHooks = append(queryConditionDiscloseGroupBeforeUpsertHooks, queryConditionDiscloseGroupHook)
	case boil.AfterInsertHook:
		queryConditionDiscloseGroupAfterInsertHooks = append(queryConditionDiscloseGroupAfterInsertHooks, queryConditionDiscloseGroupHook)
	case boil.AfterSelectHook:
		queryConditionDiscloseGroupAfterSelectHooks = append(queryConditionDiscloseGroupAfterSelectHooks, queryConditionDiscloseGroupHook)
	case boil.AfterUpdateHook:
		queryConditionDiscloseGroupAfterUpdateHooks = append(queryConditionDiscloseGroupAfterUpdateHooks, queryConditionDiscloseGroupHook)
	case boil.AfterDeleteHook:
		queryConditionDiscloseGroupAfterDeleteHooks = append(queryConditionDiscloseGroupAfterDeleteHooks, queryConditionDiscloseGroupHook)
	case boil.AfterUpsertHook:
		queryConditionDiscloseGroupAfterUpsertHooks = append(queryConditionDiscloseGroupAfterUpsertHooks, queryConditionDiscloseGroupHook)
	}
}

// One returns a single queryConditionDiscloseGroup record from the query.
func (q queryConditionDiscloseGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*QueryConditionDiscloseGroup, error) {
	o := &QueryConditionDiscloseGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for query_condition_disclose_groups")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all QueryConditionDiscloseGroup records from the query.
func (q queryConditionDiscloseGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (QueryConditionDiscloseGroupSlice, error) {
	var o []*QueryConditionDiscloseGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to QueryConditionDiscloseGroup slice")
	}

	if len(queryConditionDiscloseGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all QueryConditionDiscloseGroup records in the query.
func (q queryConditionDiscloseGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count query_condition_disclose_groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q queryConditionDiscloseGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if query_condition_disclose_groups exists")
	}

	return count > 0, nil
}

// QueryConditionDiscloseGroups retrieves all the records using an executor.
func QueryConditionDiscloseGroups(mods ...qm.QueryMod) queryConditionDiscloseGroupQuery {
	mods = append(mods, qm.From("\"query_condition_disclose_groups\""))
	return queryConditionDiscloseGroupQuery{NewQuery(mods...)}
}

// FindQueryConditionDiscloseGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQueryConditionDiscloseGroup(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*QueryConditionDiscloseGroup, error) {
	queryConditionDiscloseGroupObj := &QueryConditionDiscloseGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"query_condition_disclose_groups\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, queryConditionDiscloseGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from query_condition_disclose_groups")
	}

	return queryConditionDiscloseGroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *QueryConditionDiscloseGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no query_condition_disclose_groups provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(queryConditionDiscloseGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	queryConditionDiscloseGroupInsertCacheMut.RLock()
	cache, cached := queryConditionDiscloseGroupInsertCache[key]
	queryConditionDiscloseGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			queryConditionDiscloseGroupAllColumns,
			queryConditionDiscloseGroupColumnsWithDefault,
			queryConditionDiscloseGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(queryConditionDiscloseGroupType, queryConditionDiscloseGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(queryConditionDiscloseGroupType, queryConditionDiscloseGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"query_condition_disclose_groups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"query_condition_disclose_groups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into query_condition_disclose_groups")
	}

	if !cached {
		queryConditionDiscloseGroupInsertCacheMut.Lock()
		queryConditionDiscloseGroupInsertCache[key] = cache
		queryConditionDiscloseGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the QueryConditionDiscloseGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *QueryConditionDiscloseGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	queryConditionDiscloseGroupUpdateCacheMut.RLock()
	cache, cached := queryConditionDiscloseGroupUpdateCache[key]
	queryConditionDiscloseGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			queryConditionDiscloseGroupAllColumns,
			queryConditionDiscloseGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update query_condition_disclose_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"query_condition_disclose_groups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, queryConditionDiscloseGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(queryConditionDiscloseGroupType, queryConditionDiscloseGroupMapping, append(wl, queryConditionDiscloseGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update query_condition_disclose_groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for query_condition_disclose_groups")
	}

	if !cached {
		queryConditionDiscloseGroupUpdateCacheMut.Lock()
		queryConditionDiscloseGroupUpdateCache[key] = cache
		queryConditionDiscloseGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q queryConditionDiscloseGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for query_condition_disclose_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for query_condition_disclose_groups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QueryConditionDiscloseGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryConditionDiscloseGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"query_condition_disclose_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, queryConditionDiscloseGroupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in queryConditionDiscloseGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all queryConditionDiscloseGroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *QueryConditionDiscloseGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no query_condition_disclose_groups provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(queryConditionDiscloseGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	queryConditionDiscloseGroupUpsertCacheMut.RLock()
	cache, cached := queryConditionDiscloseGroupUpsertCache[key]
	queryConditionDiscloseGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			queryConditionDiscloseGroupAllColumns,
			queryConditionDiscloseGroupColumnsWithDefault,
			queryConditionDiscloseGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			queryConditionDiscloseGroupAllColumns,
			queryConditionDiscloseGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert query_condition_disclose_groups, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(queryConditionDiscloseGroupPrimaryKeyColumns))
			copy(conflict, queryConditionDiscloseGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"query_condition_disclose_groups\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(queryConditionDiscloseGroupType, queryConditionDiscloseGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(queryConditionDiscloseGroupType, queryConditionDiscloseGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert query_condition_disclose_groups")
	}

	if !cached {
		queryConditionDiscloseGroupUpsertCacheMut.Lock()
		queryConditionDiscloseGroupUpsertCache[key] = cache
		queryConditionDiscloseGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single QueryConditionDiscloseGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *QueryConditionDiscloseGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no QueryConditionDiscloseGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), queryConditionDiscloseGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"query_condition_disclose_groups\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from query_condition_disclose_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for query_condition_disclose_groups")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q queryConditionDiscloseGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no queryConditionDiscloseGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from query_condition_disclose_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for query_condition_disclose_groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QueryConditionDiscloseGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(queryConditionDiscloseGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryConditionDiscloseGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"query_condition_disclose_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, queryConditionDiscloseGroupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from queryConditionDiscloseGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for query_condition_disclose_groups")
	}

	if len(queryConditionDiscloseGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *QueryConditionDiscloseGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindQueryConditionDiscloseGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QueryConditionDiscloseGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QueryConditionDiscloseGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryConditionDiscloseGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"query_condition_disclose_groups\".* FROM \"query_condition_disclose_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, queryConditionDiscloseGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in QueryConditionDiscloseGroupSlice")
	}

	*o = slice

	return nil
}

// QueryConditionDiscloseGroupExists checks if the QueryConditionDiscloseGroup row exists.
func QueryConditionDiscloseGroupExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"query_condition_disclose_groups\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if query_condition_disclose_groups exists")
	}

	return exists, nil
}
