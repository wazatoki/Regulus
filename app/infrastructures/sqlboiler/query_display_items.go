// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// QueryDisplayItem is an object representing the database table.
type QueryDisplayItem struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Del               bool        `boil:"del" json:"del" toml:"del" yaml:"del"`
	CreatedAt         null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	CreStaffID        null.String `boil:"cre_staff_id" json:"cre_staff_id,omitempty" toml:"cre_staff_id" yaml:"cre_staff_id,omitempty"`
	UpdatedAt         null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdateStaffID     null.String `boil:"update_staff_id" json:"update_staff_id,omitempty" toml:"update_staff_id" yaml:"update_staff_id,omitempty"`
	QueryConditionsID string      `boil:"query_conditions_id" json:"query_conditions_id" toml:"query_conditions_id" yaml:"query_conditions_id"`
	DisplayFieldID    string      `boil:"display_field_id" json:"display_field_id" toml:"display_field_id" yaml:"display_field_id"`
	RowOrder          int         `boil:"row_order" json:"row_order" toml:"row_order" yaml:"row_order"`

	R *queryDisplayItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L queryDisplayItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QueryDisplayItemColumns = struct {
	ID                string
	Del               string
	CreatedAt         string
	CreStaffID        string
	UpdatedAt         string
	UpdateStaffID     string
	QueryConditionsID string
	DisplayFieldID    string
	RowOrder          string
}{
	ID:                "id",
	Del:               "del",
	CreatedAt:         "created_at",
	CreStaffID:        "cre_staff_id",
	UpdatedAt:         "updated_at",
	UpdateStaffID:     "update_staff_id",
	QueryConditionsID: "query_conditions_id",
	DisplayFieldID:    "display_field_id",
	RowOrder:          "row_order",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var QueryDisplayItemWhere = struct {
	ID                whereHelperstring
	Del               whereHelperbool
	CreatedAt         whereHelpernull_Time
	CreStaffID        whereHelpernull_String
	UpdatedAt         whereHelpernull_Time
	UpdateStaffID     whereHelpernull_String
	QueryConditionsID whereHelperstring
	DisplayFieldID    whereHelperstring
	RowOrder          whereHelperint
}{
	ID:                whereHelperstring{field: "\"query_display_items\".\"id\""},
	Del:               whereHelperbool{field: "\"query_display_items\".\"del\""},
	CreatedAt:         whereHelpernull_Time{field: "\"query_display_items\".\"created_at\""},
	CreStaffID:        whereHelpernull_String{field: "\"query_display_items\".\"cre_staff_id\""},
	UpdatedAt:         whereHelpernull_Time{field: "\"query_display_items\".\"updated_at\""},
	UpdateStaffID:     whereHelpernull_String{field: "\"query_display_items\".\"update_staff_id\""},
	QueryConditionsID: whereHelperstring{field: "\"query_display_items\".\"query_conditions_id\""},
	DisplayFieldID:    whereHelperstring{field: "\"query_display_items\".\"display_field_id\""},
	RowOrder:          whereHelperint{field: "\"query_display_items\".\"row_order\""},
}

// QueryDisplayItemRels is where relationship names are stored.
var QueryDisplayItemRels = struct {
	QueryCondition string
}{
	QueryCondition: "QueryCondition",
}

// queryDisplayItemR is where relationships are stored.
type queryDisplayItemR struct {
	QueryCondition *QueryCondition
}

// NewStruct creates a new relationship struct
func (*queryDisplayItemR) NewStruct() *queryDisplayItemR {
	return &queryDisplayItemR{}
}

// queryDisplayItemL is where Load methods for each relationship are stored.
type queryDisplayItemL struct{}

var (
	queryDisplayItemAllColumns            = []string{"id", "del", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "query_conditions_id", "display_field_id", "row_order"}
	queryDisplayItemColumnsWithoutDefault = []string{"id", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "query_conditions_id", "display_field_id", "row_order"}
	queryDisplayItemColumnsWithDefault    = []string{"del"}
	queryDisplayItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// QueryDisplayItemSlice is an alias for a slice of pointers to QueryDisplayItem.
	// This should generally be used opposed to []QueryDisplayItem.
	QueryDisplayItemSlice []*QueryDisplayItem
	// QueryDisplayItemHook is the signature for custom QueryDisplayItem hook methods
	QueryDisplayItemHook func(context.Context, boil.ContextExecutor, *QueryDisplayItem) error

	queryDisplayItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	queryDisplayItemType                 = reflect.TypeOf(&QueryDisplayItem{})
	queryDisplayItemMapping              = queries.MakeStructMapping(queryDisplayItemType)
	queryDisplayItemPrimaryKeyMapping, _ = queries.BindMapping(queryDisplayItemType, queryDisplayItemMapping, queryDisplayItemPrimaryKeyColumns)
	queryDisplayItemInsertCacheMut       sync.RWMutex
	queryDisplayItemInsertCache          = make(map[string]insertCache)
	queryDisplayItemUpdateCacheMut       sync.RWMutex
	queryDisplayItemUpdateCache          = make(map[string]updateCache)
	queryDisplayItemUpsertCacheMut       sync.RWMutex
	queryDisplayItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var queryDisplayItemBeforeInsertHooks []QueryDisplayItemHook
var queryDisplayItemBeforeUpdateHooks []QueryDisplayItemHook
var queryDisplayItemBeforeDeleteHooks []QueryDisplayItemHook
var queryDisplayItemBeforeUpsertHooks []QueryDisplayItemHook

var queryDisplayItemAfterInsertHooks []QueryDisplayItemHook
var queryDisplayItemAfterSelectHooks []QueryDisplayItemHook
var queryDisplayItemAfterUpdateHooks []QueryDisplayItemHook
var queryDisplayItemAfterDeleteHooks []QueryDisplayItemHook
var queryDisplayItemAfterUpsertHooks []QueryDisplayItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *QueryDisplayItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *QueryDisplayItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *QueryDisplayItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *QueryDisplayItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *QueryDisplayItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *QueryDisplayItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *QueryDisplayItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *QueryDisplayItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *QueryDisplayItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range queryDisplayItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQueryDisplayItemHook registers your hook function for all future operations.
func AddQueryDisplayItemHook(hookPoint boil.HookPoint, queryDisplayItemHook QueryDisplayItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		queryDisplayItemBeforeInsertHooks = append(queryDisplayItemBeforeInsertHooks, queryDisplayItemHook)
	case boil.BeforeUpdateHook:
		queryDisplayItemBeforeUpdateHooks = append(queryDisplayItemBeforeUpdateHooks, queryDisplayItemHook)
	case boil.BeforeDeleteHook:
		queryDisplayItemBeforeDeleteHooks = append(queryDisplayItemBeforeDeleteHooks, queryDisplayItemHook)
	case boil.BeforeUpsertHook:
		queryDisplayItemBeforeUpsertHooks = append(queryDisplayItemBeforeUpsertHooks, queryDisplayItemHook)
	case boil.AfterInsertHook:
		queryDisplayItemAfterInsertHooks = append(queryDisplayItemAfterInsertHooks, queryDisplayItemHook)
	case boil.AfterSelectHook:
		queryDisplayItemAfterSelectHooks = append(queryDisplayItemAfterSelectHooks, queryDisplayItemHook)
	case boil.AfterUpdateHook:
		queryDisplayItemAfterUpdateHooks = append(queryDisplayItemAfterUpdateHooks, queryDisplayItemHook)
	case boil.AfterDeleteHook:
		queryDisplayItemAfterDeleteHooks = append(queryDisplayItemAfterDeleteHooks, queryDisplayItemHook)
	case boil.AfterUpsertHook:
		queryDisplayItemAfterUpsertHooks = append(queryDisplayItemAfterUpsertHooks, queryDisplayItemHook)
	}
}

// One returns a single queryDisplayItem record from the query.
func (q queryDisplayItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*QueryDisplayItem, error) {
	o := &QueryDisplayItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for query_display_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all QueryDisplayItem records from the query.
func (q queryDisplayItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (QueryDisplayItemSlice, error) {
	var o []*QueryDisplayItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to QueryDisplayItem slice")
	}

	if len(queryDisplayItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all QueryDisplayItem records in the query.
func (q queryDisplayItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count query_display_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q queryDisplayItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if query_display_items exists")
	}

	return count > 0, nil
}

// QueryCondition pointed to by the foreign key.
func (o *QueryDisplayItem) QueryCondition(mods ...qm.QueryMod) queryConditionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.QueryConditionsID),
	}

	queryMods = append(queryMods, mods...)

	query := QueryConditions(queryMods...)
	queries.SetFrom(query.Query, "\"query_conditions\"")

	return query
}

// LoadQueryCondition allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (queryDisplayItemL) LoadQueryCondition(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQueryDisplayItem interface{}, mods queries.Applicator) error {
	var slice []*QueryDisplayItem
	var object *QueryDisplayItem

	if singular {
		object = maybeQueryDisplayItem.(*QueryDisplayItem)
	} else {
		slice = *maybeQueryDisplayItem.(*[]*QueryDisplayItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &queryDisplayItemR{}
		}
		args = append(args, object.QueryConditionsID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &queryDisplayItemR{}
			}

			for _, a := range args {
				if a == obj.QueryConditionsID {
					continue Outer
				}
			}

			args = append(args, obj.QueryConditionsID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`query_conditions`), qm.WhereIn(`query_conditions.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load QueryCondition")
	}

	var resultSlice []*QueryCondition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice QueryCondition")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for query_conditions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_conditions")
	}

	if len(queryDisplayItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QueryCondition = foreign
		if foreign.R == nil {
			foreign.R = &queryConditionR{}
		}
		foreign.R.QueryDisplayItems = append(foreign.R.QueryDisplayItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QueryConditionsID == foreign.ID {
				local.R.QueryCondition = foreign
				if foreign.R == nil {
					foreign.R = &queryConditionR{}
				}
				foreign.R.QueryDisplayItems = append(foreign.R.QueryDisplayItems, local)
				break
			}
		}
	}

	return nil
}

// SetQueryCondition of the queryDisplayItem to the related item.
// Sets o.R.QueryCondition to related.
// Adds o to related.R.QueryDisplayItems.
func (o *QueryDisplayItem) SetQueryCondition(ctx context.Context, exec boil.ContextExecutor, insert bool, related *QueryCondition) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"query_display_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"query_conditions_id"}),
		strmangle.WhereClause("\"", "\"", 2, queryDisplayItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QueryConditionsID = related.ID
	if o.R == nil {
		o.R = &queryDisplayItemR{
			QueryCondition: related,
		}
	} else {
		o.R.QueryCondition = related
	}

	if related.R == nil {
		related.R = &queryConditionR{
			QueryDisplayItems: QueryDisplayItemSlice{o},
		}
	} else {
		related.R.QueryDisplayItems = append(related.R.QueryDisplayItems, o)
	}

	return nil
}

// QueryDisplayItems retrieves all the records using an executor.
func QueryDisplayItems(mods ...qm.QueryMod) queryDisplayItemQuery {
	mods = append(mods, qm.From("\"query_display_items\""))
	return queryDisplayItemQuery{NewQuery(mods...)}
}

// FindQueryDisplayItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQueryDisplayItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*QueryDisplayItem, error) {
	queryDisplayItemObj := &QueryDisplayItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"query_display_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, queryDisplayItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from query_display_items")
	}

	return queryDisplayItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *QueryDisplayItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no query_display_items provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(queryDisplayItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	queryDisplayItemInsertCacheMut.RLock()
	cache, cached := queryDisplayItemInsertCache[key]
	queryDisplayItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			queryDisplayItemAllColumns,
			queryDisplayItemColumnsWithDefault,
			queryDisplayItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(queryDisplayItemType, queryDisplayItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(queryDisplayItemType, queryDisplayItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"query_display_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"query_display_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into query_display_items")
	}

	if !cached {
		queryDisplayItemInsertCacheMut.Lock()
		queryDisplayItemInsertCache[key] = cache
		queryDisplayItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the QueryDisplayItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *QueryDisplayItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	queryDisplayItemUpdateCacheMut.RLock()
	cache, cached := queryDisplayItemUpdateCache[key]
	queryDisplayItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			queryDisplayItemAllColumns,
			queryDisplayItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update query_display_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"query_display_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, queryDisplayItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(queryDisplayItemType, queryDisplayItemMapping, append(wl, queryDisplayItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update query_display_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for query_display_items")
	}

	if !cached {
		queryDisplayItemUpdateCacheMut.Lock()
		queryDisplayItemUpdateCache[key] = cache
		queryDisplayItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q queryDisplayItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for query_display_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for query_display_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QueryDisplayItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryDisplayItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"query_display_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, queryDisplayItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in queryDisplayItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all queryDisplayItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *QueryDisplayItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no query_display_items provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(queryDisplayItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	queryDisplayItemUpsertCacheMut.RLock()
	cache, cached := queryDisplayItemUpsertCache[key]
	queryDisplayItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			queryDisplayItemAllColumns,
			queryDisplayItemColumnsWithDefault,
			queryDisplayItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			queryDisplayItemAllColumns,
			queryDisplayItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert query_display_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(queryDisplayItemPrimaryKeyColumns))
			copy(conflict, queryDisplayItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"query_display_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(queryDisplayItemType, queryDisplayItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(queryDisplayItemType, queryDisplayItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert query_display_items")
	}

	if !cached {
		queryDisplayItemUpsertCacheMut.Lock()
		queryDisplayItemUpsertCache[key] = cache
		queryDisplayItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single QueryDisplayItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *QueryDisplayItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no QueryDisplayItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), queryDisplayItemPrimaryKeyMapping)
	sql := "DELETE FROM \"query_display_items\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from query_display_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for query_display_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q queryDisplayItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no queryDisplayItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from query_display_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for query_display_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QueryDisplayItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(queryDisplayItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryDisplayItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"query_display_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, queryDisplayItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from queryDisplayItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for query_display_items")
	}

	if len(queryDisplayItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *QueryDisplayItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindQueryDisplayItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QueryDisplayItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QueryDisplayItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), queryDisplayItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"query_display_items\".* FROM \"query_display_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, queryDisplayItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in QueryDisplayItemSlice")
	}

	*o = slice

	return nil
}

// QueryDisplayItemExists checks if the QueryDisplayItem row exists.
func QueryDisplayItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"query_display_items\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if query_display_items exists")
	}

	return exists, nil
}
