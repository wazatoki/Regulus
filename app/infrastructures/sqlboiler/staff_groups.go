// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StaffGroup is an object representing the database table.
type StaffGroup struct {
	ID            string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Del           bool        `db:"del" boil:"del" json:"del" toml:"del" yaml:"del"`
	CreatedAt     null.Time   `db:"created_at" boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	CreStaffID    null.String `db:"cre_staff_id" boil:"cre_staff_id" json:"cre_staff_id,omitempty" toml:"cre_staff_id" yaml:"cre_staff_id,omitempty"`
	UpdatedAt     null.Time   `db:"updated_at" boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdateStaffID null.String `db:"update_staff_id" boil:"update_staff_id" json:"update_staff_id,omitempty" toml:"update_staff_id" yaml:"update_staff_id,omitempty"`
	Name          string      `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`

	R *staffGroupR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffGroupL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffGroupColumns = struct {
	ID            string
	Del           string
	CreatedAt     string
	CreStaffID    string
	UpdatedAt     string
	UpdateStaffID string
	Name          string
}{
	ID:            "id",
	Del:           "del",
	CreatedAt:     "created_at",
	CreStaffID:    "cre_staff_id",
	UpdatedAt:     "updated_at",
	UpdateStaffID: "update_staff_id",
	Name:          "name",
}

var StaffGroupTableColumns = struct {
	ID            string
	Del           string
	CreatedAt     string
	CreStaffID    string
	UpdatedAt     string
	UpdateStaffID string
	Name          string
}{
	ID:            "staff_groups.id",
	Del:           "staff_groups.del",
	CreatedAt:     "staff_groups.created_at",
	CreStaffID:    "staff_groups.cre_staff_id",
	UpdatedAt:     "staff_groups.updated_at",
	UpdateStaffID: "staff_groups.update_staff_id",
	Name:          "staff_groups.name",
}

// Generated where

var StaffGroupWhere = struct {
	ID            whereHelperstring
	Del           whereHelperbool
	CreatedAt     whereHelpernull_Time
	CreStaffID    whereHelpernull_String
	UpdatedAt     whereHelpernull_Time
	UpdateStaffID whereHelpernull_String
	Name          whereHelperstring
}{
	ID:            whereHelperstring{field: "\"staff_groups\".\"id\""},
	Del:           whereHelperbool{field: "\"staff_groups\".\"del\""},
	CreatedAt:     whereHelpernull_Time{field: "\"staff_groups\".\"created_at\""},
	CreStaffID:    whereHelpernull_String{field: "\"staff_groups\".\"cre_staff_id\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"staff_groups\".\"updated_at\""},
	UpdateStaffID: whereHelpernull_String{field: "\"staff_groups\".\"update_staff_id\""},
	Name:          whereHelperstring{field: "\"staff_groups\".\"name\""},
}

// StaffGroupRels is where relationship names are stored.
var StaffGroupRels = struct {
	QueryConditions string
	Staffs          string
}{
	QueryConditions: "QueryConditions",
	Staffs:          "Staffs",
}

// staffGroupR is where relationships are stored.
type staffGroupR struct {
	QueryConditions QueryConditionSlice `db:"QueryConditions" boil:"QueryConditions" json:"QueryConditions" toml:"QueryConditions" yaml:"QueryConditions"`
	Staffs          StaffSlice          `db:"Staffs" boil:"Staffs" json:"Staffs" toml:"Staffs" yaml:"Staffs"`
}

// NewStruct creates a new relationship struct
func (*staffGroupR) NewStruct() *staffGroupR {
	return &staffGroupR{}
}

// staffGroupL is where Load methods for each relationship are stored.
type staffGroupL struct{}

var (
	staffGroupAllColumns            = []string{"id", "del", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "name"}
	staffGroupColumnsWithoutDefault = []string{"id", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "name"}
	staffGroupColumnsWithDefault    = []string{"del"}
	staffGroupPrimaryKeyColumns     = []string{"id"}
)

type (
	// StaffGroupSlice is an alias for a slice of pointers to StaffGroup.
	// This should almost always be used instead of []StaffGroup.
	StaffGroupSlice []*StaffGroup
	// StaffGroupHook is the signature for custom StaffGroup hook methods
	StaffGroupHook func(context.Context, boil.ContextExecutor, *StaffGroup) error

	staffGroupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffGroupType                 = reflect.TypeOf(&StaffGroup{})
	staffGroupMapping              = queries.MakeStructMapping(staffGroupType)
	staffGroupPrimaryKeyMapping, _ = queries.BindMapping(staffGroupType, staffGroupMapping, staffGroupPrimaryKeyColumns)
	staffGroupInsertCacheMut       sync.RWMutex
	staffGroupInsertCache          = make(map[string]insertCache)
	staffGroupUpdateCacheMut       sync.RWMutex
	staffGroupUpdateCache          = make(map[string]updateCache)
	staffGroupUpsertCacheMut       sync.RWMutex
	staffGroupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var staffGroupBeforeInsertHooks []StaffGroupHook
var staffGroupBeforeUpdateHooks []StaffGroupHook
var staffGroupBeforeDeleteHooks []StaffGroupHook
var staffGroupBeforeUpsertHooks []StaffGroupHook

var staffGroupAfterInsertHooks []StaffGroupHook
var staffGroupAfterSelectHooks []StaffGroupHook
var staffGroupAfterUpdateHooks []StaffGroupHook
var staffGroupAfterDeleteHooks []StaffGroupHook
var staffGroupAfterUpsertHooks []StaffGroupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StaffGroup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StaffGroup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StaffGroup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StaffGroup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StaffGroup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StaffGroup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StaffGroup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StaffGroup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StaffGroup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffGroupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaffGroupHook registers your hook function for all future operations.
func AddStaffGroupHook(hookPoint boil.HookPoint, staffGroupHook StaffGroupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		staffGroupBeforeInsertHooks = append(staffGroupBeforeInsertHooks, staffGroupHook)
	case boil.BeforeUpdateHook:
		staffGroupBeforeUpdateHooks = append(staffGroupBeforeUpdateHooks, staffGroupHook)
	case boil.BeforeDeleteHook:
		staffGroupBeforeDeleteHooks = append(staffGroupBeforeDeleteHooks, staffGroupHook)
	case boil.BeforeUpsertHook:
		staffGroupBeforeUpsertHooks = append(staffGroupBeforeUpsertHooks, staffGroupHook)
	case boil.AfterInsertHook:
		staffGroupAfterInsertHooks = append(staffGroupAfterInsertHooks, staffGroupHook)
	case boil.AfterSelectHook:
		staffGroupAfterSelectHooks = append(staffGroupAfterSelectHooks, staffGroupHook)
	case boil.AfterUpdateHook:
		staffGroupAfterUpdateHooks = append(staffGroupAfterUpdateHooks, staffGroupHook)
	case boil.AfterDeleteHook:
		staffGroupAfterDeleteHooks = append(staffGroupAfterDeleteHooks, staffGroupHook)
	case boil.AfterUpsertHook:
		staffGroupAfterUpsertHooks = append(staffGroupAfterUpsertHooks, staffGroupHook)
	}
}

// One returns a single staffGroup record from the query.
func (q staffGroupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StaffGroup, error) {
	o := &StaffGroup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for staff_groups")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StaffGroup records from the query.
func (q staffGroupQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaffGroupSlice, error) {
	var o []*StaffGroup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to StaffGroup slice")
	}

	if len(staffGroupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StaffGroup records in the query.
func (q staffGroupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count staff_groups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staffGroupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if staff_groups exists")
	}

	return count > 0, nil
}

// QueryConditions retrieves all the query_condition's QueryConditions with an executor.
func (o *StaffGroup) QueryConditions(mods ...qm.QueryMod) queryConditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"join_query_conditions_staff_groups\" on \"query_conditions\".\"id\" = \"join_query_conditions_staff_groups\".\"query_conditions_id\""),
		qm.Where("\"join_query_conditions_staff_groups\".\"staff_groups_id\"=?", o.ID),
	)

	query := QueryConditions(queryMods...)
	queries.SetFrom(query.Query, "\"query_conditions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"query_conditions\".*"})
	}

	return query
}

// Staffs retrieves all the staff's Staffs with an executor.
func (o *StaffGroup) Staffs(mods ...qm.QueryMod) staffQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"join_staffs_staff_groups\" on \"staffs\".\"id\" = \"join_staffs_staff_groups\".\"staffs_id\""),
		qm.Where("\"join_staffs_staff_groups\".\"staff_groups_id\"=?", o.ID),
	)

	query := Staffs(queryMods...)
	queries.SetFrom(query.Query, "\"staffs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"staffs\".*"})
	}

	return query
}

// LoadQueryConditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffGroupL) LoadQueryConditions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaffGroup interface{}, mods queries.Applicator) error {
	var slice []*StaffGroup
	var object *StaffGroup

	if singular {
		object = maybeStaffGroup.(*StaffGroup)
	} else {
		slice = *maybeStaffGroup.(*[]*StaffGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffGroupR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"query_conditions\".id, \"query_conditions\".del, \"query_conditions\".created_at, \"query_conditions\".cre_staff_id, \"query_conditions\".updated_at, \"query_conditions\".update_staff_id, \"query_conditions\".pattern_name, \"query_conditions\".category_name, \"query_conditions\".is_disclose, \"query_conditions\".owner_id, \"a\".\"staff_groups_id\""),
		qm.From("\"query_conditions\""),
		qm.InnerJoin("\"join_query_conditions_staff_groups\" as \"a\" on \"query_conditions\".\"id\" = \"a\".\"query_conditions_id\""),
		qm.WhereIn("\"a\".\"staff_groups_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load query_conditions")
	}

	var resultSlice []*QueryCondition

	var localJoinCols []string
	for results.Next() {
		one := new(QueryCondition)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Del, &one.CreatedAt, &one.CreStaffID, &one.UpdatedAt, &one.UpdateStaffID, &one.PatternName, &one.CategoryName, &one.IsDisclose, &one.OwnerID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for query_conditions")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice query_conditions")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on query_conditions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_conditions")
	}

	if len(queryConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QueryConditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &queryConditionR{}
			}
			foreign.R.StaffGroups = append(foreign.R.StaffGroups, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.QueryConditions = append(local.R.QueryConditions, foreign)
				if foreign.R == nil {
					foreign.R = &queryConditionR{}
				}
				foreign.R.StaffGroups = append(foreign.R.StaffGroups, local)
				break
			}
		}
	}

	return nil
}

// LoadStaffs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffGroupL) LoadStaffs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaffGroup interface{}, mods queries.Applicator) error {
	var slice []*StaffGroup
	var object *StaffGroup

	if singular {
		object = maybeStaffGroup.(*StaffGroup)
	} else {
		slice = *maybeStaffGroup.(*[]*StaffGroup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffGroupR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffGroupR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"staffs\".id, \"staffs\".del, \"staffs\".created_at, \"staffs\".cre_staff_id, \"staffs\".updated_at, \"staffs\".update_staff_id, \"staffs\".account_id, \"staffs\".password, \"staffs\".name, \"a\".\"staff_groups_id\""),
		qm.From("\"staffs\""),
		qm.InnerJoin("\"join_staffs_staff_groups\" as \"a\" on \"staffs\".\"id\" = \"a\".\"staffs_id\""),
		qm.WhereIn("\"a\".\"staff_groups_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staffs")
	}

	var resultSlice []*Staff

	var localJoinCols []string
	for results.Next() {
		one := new(Staff)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Del, &one.CreatedAt, &one.CreStaffID, &one.UpdatedAt, &one.UpdateStaffID, &one.AccountID, &one.Password, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for staffs")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice staffs")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staffs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staffs")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Staffs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staffR{}
			}
			foreign.R.StaffGroups = append(foreign.R.StaffGroups, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Staffs = append(local.R.Staffs, foreign)
				if foreign.R == nil {
					foreign.R = &staffR{}
				}
				foreign.R.StaffGroups = append(foreign.R.StaffGroups, local)
				break
			}
		}
	}

	return nil
}

// AddQueryConditions adds the given related objects to the existing relationships
// of the staff_group, optionally inserting them as new records.
// Appends related to o.R.QueryConditions.
// Sets related.R.StaffGroups appropriately.
func (o *StaffGroup) AddQueryConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryCondition) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"join_query_conditions_staff_groups\" (\"staff_groups_id\", \"query_conditions_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &staffGroupR{
			QueryConditions: related,
		}
	} else {
		o.R.QueryConditions = append(o.R.QueryConditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &queryConditionR{
				StaffGroups: StaffGroupSlice{o},
			}
		} else {
			rel.R.StaffGroups = append(rel.R.StaffGroups, o)
		}
	}
	return nil
}

// SetQueryConditions removes all previously related items of the
// staff_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StaffGroups's QueryConditions accordingly.
// Replaces o.R.QueryConditions with related.
// Sets related.R.StaffGroups's QueryConditions accordingly.
func (o *StaffGroup) SetQueryConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryCondition) error {
	query := "delete from \"join_query_conditions_staff_groups\" where \"staff_groups_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeQueryConditionsFromStaffGroupsSlice(o, related)
	if o.R != nil {
		o.R.QueryConditions = nil
	}
	return o.AddQueryConditions(ctx, exec, insert, related...)
}

// RemoveQueryConditions relationships from objects passed in.
// Removes related items from R.QueryConditions (uses pointer comparison, removal does not keep order)
// Sets related.R.StaffGroups.
func (o *StaffGroup) RemoveQueryConditions(ctx context.Context, exec boil.ContextExecutor, related ...*QueryCondition) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"join_query_conditions_staff_groups\" where \"staff_groups_id\" = $1 and \"query_conditions_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeQueryConditionsFromStaffGroupsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QueryConditions {
			if rel != ri {
				continue
			}

			ln := len(o.R.QueryConditions)
			if ln > 1 && i < ln-1 {
				o.R.QueryConditions[i] = o.R.QueryConditions[ln-1]
			}
			o.R.QueryConditions = o.R.QueryConditions[:ln-1]
			break
		}
	}

	return nil
}

func removeQueryConditionsFromStaffGroupsSlice(o *StaffGroup, related []*QueryCondition) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.StaffGroups {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.StaffGroups)
			if ln > 1 && i < ln-1 {
				rel.R.StaffGroups[i] = rel.R.StaffGroups[ln-1]
			}
			rel.R.StaffGroups = rel.R.StaffGroups[:ln-1]
			break
		}
	}
}

// AddStaffs adds the given related objects to the existing relationships
// of the staff_group, optionally inserting them as new records.
// Appends related to o.R.Staffs.
// Sets related.R.StaffGroups appropriately.
func (o *StaffGroup) AddStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"join_staffs_staff_groups\" (\"staff_groups_id\", \"staffs_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &staffGroupR{
			Staffs: related,
		}
	} else {
		o.R.Staffs = append(o.R.Staffs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffR{
				StaffGroups: StaffGroupSlice{o},
			}
		} else {
			rel.R.StaffGroups = append(rel.R.StaffGroups, o)
		}
	}
	return nil
}

// SetStaffs removes all previously related items of the
// staff_group replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StaffGroups's Staffs accordingly.
// Replaces o.R.Staffs with related.
// Sets related.R.StaffGroups's Staffs accordingly.
func (o *StaffGroup) SetStaffs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Staff) error {
	query := "delete from \"join_staffs_staff_groups\" where \"staff_groups_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeStaffsFromStaffGroupsSlice(o, related)
	if o.R != nil {
		o.R.Staffs = nil
	}
	return o.AddStaffs(ctx, exec, insert, related...)
}

// RemoveStaffs relationships from objects passed in.
// Removes related items from R.Staffs (uses pointer comparison, removal does not keep order)
// Sets related.R.StaffGroups.
func (o *StaffGroup) RemoveStaffs(ctx context.Context, exec boil.ContextExecutor, related ...*Staff) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"join_staffs_staff_groups\" where \"staff_groups_id\" = $1 and \"staffs_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeStaffsFromStaffGroupsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Staffs {
			if rel != ri {
				continue
			}

			ln := len(o.R.Staffs)
			if ln > 1 && i < ln-1 {
				o.R.Staffs[i] = o.R.Staffs[ln-1]
			}
			o.R.Staffs = o.R.Staffs[:ln-1]
			break
		}
	}

	return nil
}

func removeStaffsFromStaffGroupsSlice(o *StaffGroup, related []*Staff) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.StaffGroups {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.StaffGroups)
			if ln > 1 && i < ln-1 {
				rel.R.StaffGroups[i] = rel.R.StaffGroups[ln-1]
			}
			rel.R.StaffGroups = rel.R.StaffGroups[:ln-1]
			break
		}
	}
}

// StaffGroups retrieves all the records using an executor.
func StaffGroups(mods ...qm.QueryMod) staffGroupQuery {
	mods = append(mods, qm.From("\"staff_groups\""))
	return staffGroupQuery{NewQuery(mods...)}
}

// FindStaffGroup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaffGroup(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*StaffGroup, error) {
	staffGroupObj := &StaffGroup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"staff_groups\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, staffGroupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from staff_groups")
	}

	if err = staffGroupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return staffGroupObj, err
	}

	return staffGroupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StaffGroup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no staff_groups provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffGroupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffGroupInsertCacheMut.RLock()
	cache, cached := staffGroupInsertCache[key]
	staffGroupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffGroupAllColumns,
			staffGroupColumnsWithDefault,
			staffGroupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffGroupType, staffGroupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffGroupType, staffGroupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"staff_groups\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"staff_groups\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into staff_groups")
	}

	if !cached {
		staffGroupInsertCacheMut.Lock()
		staffGroupInsertCache[key] = cache
		staffGroupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StaffGroup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StaffGroup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	staffGroupUpdateCacheMut.RLock()
	cache, cached := staffGroupUpdateCache[key]
	staffGroupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffGroupAllColumns,
			staffGroupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update staff_groups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"staff_groups\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, staffGroupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffGroupType, staffGroupMapping, append(wl, staffGroupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update staff_groups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for staff_groups")
	}

	if !cached {
		staffGroupUpdateCacheMut.Lock()
		staffGroupUpdateCache[key] = cache
		staffGroupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q staffGroupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for staff_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for staff_groups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffGroupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"staff_groups\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, staffGroupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in staffGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all staffGroup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StaffGroup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no staff_groups provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffGroupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffGroupUpsertCacheMut.RLock()
	cache, cached := staffGroupUpsertCache[key]
	staffGroupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staffGroupAllColumns,
			staffGroupColumnsWithDefault,
			staffGroupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			staffGroupAllColumns,
			staffGroupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert staff_groups, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(staffGroupPrimaryKeyColumns))
			copy(conflict, staffGroupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"staff_groups\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(staffGroupType, staffGroupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffGroupType, staffGroupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert staff_groups")
	}

	if !cached {
		staffGroupUpsertCacheMut.Lock()
		staffGroupUpsertCache[key] = cache
		staffGroupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StaffGroup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StaffGroup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no StaffGroup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffGroupPrimaryKeyMapping)
	sql := "DELETE FROM \"staff_groups\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from staff_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for staff_groups")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staffGroupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no staffGroupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from staff_groups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for staff_groups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffGroupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(staffGroupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"staff_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffGroupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from staffGroup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for staff_groups")
	}

	if len(staffGroupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StaffGroup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaffGroup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffGroupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffGroupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffGroupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"staff_groups\".* FROM \"staff_groups\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffGroupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in StaffGroupSlice")
	}

	*o = slice

	return nil
}

// StaffGroupExists checks if the StaffGroup row exists.
func StaffGroupExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"staff_groups\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if staff_groups exists")
	}

	return exists, nil
}
