// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQueryConditions(t *testing.T) {
	t.Parallel()

	query := QueryConditions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQueryConditionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := QueryConditions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryConditionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QueryConditionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if QueryCondition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QueryConditionExists to return true, but got false.")
	}
}

func testQueryConditionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	queryConditionFound, err := FindQueryCondition(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if queryConditionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQueryConditionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = QueryConditions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testQueryConditionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := QueryConditions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQueryConditionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	queryConditionOne := &QueryCondition{}
	queryConditionTwo := &QueryCondition{}
	if err = randomize.Struct(seed, queryConditionOne, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, queryConditionTwo, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queryConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQueryConditionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	queryConditionOne := &QueryCondition{}
	queryConditionTwo := &QueryCondition{}
	if err = randomize.Struct(seed, queryConditionOne, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}
	if err = randomize.Struct(seed, queryConditionTwo, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queryConditionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryConditionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func queryConditionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func queryConditionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryCondition) error {
	*o = QueryCondition{}
	return nil
}

func testQueryConditionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &QueryCondition{}
	o := &QueryCondition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, queryConditionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize QueryCondition object: %s", err)
	}

	AddQueryConditionHook(boil.BeforeInsertHook, queryConditionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	queryConditionBeforeInsertHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterInsertHook, queryConditionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterInsertHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterSelectHook, queryConditionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterSelectHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.BeforeUpdateHook, queryConditionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	queryConditionBeforeUpdateHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterUpdateHook, queryConditionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterUpdateHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.BeforeDeleteHook, queryConditionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	queryConditionBeforeDeleteHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterDeleteHook, queryConditionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterDeleteHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.BeforeUpsertHook, queryConditionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	queryConditionBeforeUpsertHooks = []QueryConditionHook{}

	AddQueryConditionHook(boil.AfterUpsertHook, queryConditionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	queryConditionAfterUpsertHooks = []QueryConditionHook{}
}

func testQueryConditionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryConditionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(queryConditionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryConditionToManyFavoriteConditions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c FavoriteCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, favoriteConditionDBTypes, false, favoriteConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, favoriteConditionDBTypes, false, favoriteConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.QueryConditionsID = a.ID
	c.QueryConditionsID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FavoriteConditions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.QueryConditionsID == b.QueryConditionsID {
			bFound = true
		}
		if v.QueryConditionsID == c.QueryConditionsID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := QueryConditionSlice{&a}
	if err = a.L.LoadFavoriteConditions(ctx, tx, false, (*[]*QueryCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FavoriteConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FavoriteConditions = nil
	if err = a.L.LoadFavoriteConditions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FavoriteConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testQueryConditionToManyStaffGroups(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c StaffGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, staffGroupDBTypes, false, staffGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffGroupDBTypes, false, staffGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"join_query_conditions_staff_groups\" (\"query_conditions_id\", \"staff_groups_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"join_query_conditions_staff_groups\" (\"query_conditions_id\", \"staff_groups_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.StaffGroups().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := QueryConditionSlice{&a}
	if err = a.L.LoadStaffGroups(ctx, tx, false, (*[]*QueryCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StaffGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StaffGroups = nil
	if err = a.L.LoadStaffGroups(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StaffGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testQueryConditionToManyQueryDisplayItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c QueryDisplayItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, queryDisplayItemDBTypes, false, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, queryDisplayItemDBTypes, false, queryDisplayItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.QueryConditionsID = a.ID
	c.QueryConditionsID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.QueryDisplayItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.QueryConditionsID == b.QueryConditionsID {
			bFound = true
		}
		if v.QueryConditionsID == c.QueryConditionsID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := QueryConditionSlice{&a}
	if err = a.L.LoadQueryDisplayItems(ctx, tx, false, (*[]*QueryCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QueryDisplayItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.QueryDisplayItems = nil
	if err = a.L.LoadQueryDisplayItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QueryDisplayItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testQueryConditionToManyQueryOrderConditionItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c QueryOrderConditionItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, queryOrderConditionItemDBTypes, false, queryOrderConditionItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, queryOrderConditionItemDBTypes, false, queryOrderConditionItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.QueryConditionsID = a.ID
	c.QueryConditionsID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.QueryOrderConditionItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.QueryConditionsID == b.QueryConditionsID {
			bFound = true
		}
		if v.QueryConditionsID == c.QueryConditionsID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := QueryConditionSlice{&a}
	if err = a.L.LoadQueryOrderConditionItems(ctx, tx, false, (*[]*QueryCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QueryOrderConditionItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.QueryOrderConditionItems = nil
	if err = a.L.LoadQueryOrderConditionItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QueryOrderConditionItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testQueryConditionToManyQuerySearchConditionItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c QuerySearchConditionItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, querySearchConditionItemDBTypes, false, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, querySearchConditionItemDBTypes, false, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.QueryConditionsID = a.ID
	c.QueryConditionsID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.QuerySearchConditionItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.QueryConditionsID == b.QueryConditionsID {
			bFound = true
		}
		if v.QueryConditionsID == c.QueryConditionsID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := QueryConditionSlice{&a}
	if err = a.L.LoadQuerySearchConditionItems(ctx, tx, false, (*[]*QueryCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QuerySearchConditionItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.QuerySearchConditionItems = nil
	if err = a.L.LoadQuerySearchConditionItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QuerySearchConditionItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testQueryConditionToManyAddOpFavoriteConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c, d, e FavoriteCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FavoriteCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, favoriteConditionDBTypes, false, strmangle.SetComplement(favoriteConditionPrimaryKeyColumns, favoriteConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FavoriteCondition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFavoriteConditions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.QueryConditionsID {
			t.Error("foreign key was wrong value", a.ID, first.QueryConditionsID)
		}
		if a.ID != second.QueryConditionsID {
			t.Error("foreign key was wrong value", a.ID, second.QueryConditionsID)
		}

		if first.R.QueryCondition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.QueryCondition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FavoriteConditions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FavoriteConditions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FavoriteConditions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testQueryConditionToManyAddOpStaffGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c, d, e StaffGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaffGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StaffGroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStaffGroups(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.QueryConditions[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.QueryConditions[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.StaffGroups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StaffGroups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StaffGroups().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testQueryConditionToManySetOpStaffGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c, d, e StaffGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaffGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetStaffGroups(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetStaffGroups(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.QueryConditions) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.QueryConditions) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.QueryConditions[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.QueryConditions[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.StaffGroups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.StaffGroups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testQueryConditionToManyRemoveOpStaffGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c, d, e StaffGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaffGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddStaffGroups(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveStaffGroups(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.QueryConditions) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.QueryConditions) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.QueryConditions[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.QueryConditions[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.StaffGroups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.StaffGroups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.StaffGroups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testQueryConditionToManyAddOpQueryDisplayItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c, d, e QueryDisplayItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryDisplayItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryDisplayItemDBTypes, false, strmangle.SetComplement(queryDisplayItemPrimaryKeyColumns, queryDisplayItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*QueryDisplayItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddQueryDisplayItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.QueryConditionsID {
			t.Error("foreign key was wrong value", a.ID, first.QueryConditionsID)
		}
		if a.ID != second.QueryConditionsID {
			t.Error("foreign key was wrong value", a.ID, second.QueryConditionsID)
		}

		if first.R.QueryCondition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.QueryCondition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.QueryDisplayItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.QueryDisplayItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.QueryDisplayItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testQueryConditionToManyAddOpQueryOrderConditionItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c, d, e QueryOrderConditionItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryOrderConditionItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryOrderConditionItemDBTypes, false, strmangle.SetComplement(queryOrderConditionItemPrimaryKeyColumns, queryOrderConditionItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*QueryOrderConditionItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddQueryOrderConditionItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.QueryConditionsID {
			t.Error("foreign key was wrong value", a.ID, first.QueryConditionsID)
		}
		if a.ID != second.QueryConditionsID {
			t.Error("foreign key was wrong value", a.ID, second.QueryConditionsID)
		}

		if first.R.QueryCondition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.QueryCondition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.QueryOrderConditionItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.QueryOrderConditionItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.QueryOrderConditionItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testQueryConditionToManyAddOpQuerySearchConditionItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c, d, e QuerySearchConditionItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QuerySearchConditionItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, querySearchConditionItemDBTypes, false, strmangle.SetComplement(querySearchConditionItemPrimaryKeyColumns, querySearchConditionItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*QuerySearchConditionItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddQuerySearchConditionItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.QueryConditionsID {
			t.Error("foreign key was wrong value", a.ID, first.QueryConditionsID)
		}
		if a.ID != second.QueryConditionsID {
			t.Error("foreign key was wrong value", a.ID, second.QueryConditionsID)
		}

		if first.R.QueryCondition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.QueryCondition != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.QuerySearchConditionItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.QuerySearchConditionItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.QuerySearchConditionItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testQueryConditionToOneStaffUsingCreStaff(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local QueryCondition
	var foreign Staff

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreStaffID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreStaff().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := QueryConditionSlice{&local}
	if err = local.L.LoadCreStaff(ctx, tx, false, (*[]*QueryCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreStaff == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreStaff = nil
	if err = local.L.LoadCreStaff(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreStaff == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testQueryConditionToOneStaffUsingOwner(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local QueryCondition
	var foreign Staff

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OwnerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Owner().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := QueryConditionSlice{&local}
	if err = local.L.LoadOwner(ctx, tx, false, (*[]*QueryCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Owner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Owner = nil
	if err = local.L.LoadOwner(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Owner == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testQueryConditionToOneStaffUsingUpdateStaff(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local QueryCondition
	var foreign Staff

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Staff struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UpdateStaffID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UpdateStaff().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := QueryConditionSlice{&local}
	if err = local.L.LoadUpdateStaff(ctx, tx, false, (*[]*QueryCondition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UpdateStaff == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UpdateStaff = nil
	if err = local.L.LoadUpdateStaff(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UpdateStaff == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testQueryConditionToOneSetOpStaffUsingCreStaff(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Staff{&b, &c} {
		err = a.SetCreStaff(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreStaff != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreStaffQueryConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreStaffID, x.ID) {
			t.Error("foreign key was wrong value", a.CreStaffID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreStaffID))
		reflect.Indirect(reflect.ValueOf(&a.CreStaffID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreStaffID, x.ID) {
			t.Error("foreign key was wrong value", a.CreStaffID, x.ID)
		}
	}
}

func testQueryConditionToOneRemoveOpStaffUsingCreStaff(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreStaff(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreStaff(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CreStaff().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CreStaff != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreStaffID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreStaffQueryConditions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testQueryConditionToOneSetOpStaffUsingOwner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Staff{&b, &c} {
		err = a.SetOwner(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Owner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OwnerQueryConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OwnerID != x.ID {
			t.Error("foreign key was wrong value", a.OwnerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OwnerID))
		reflect.Indirect(reflect.ValueOf(&a.OwnerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OwnerID != x.ID {
			t.Error("foreign key was wrong value", a.OwnerID, x.ID)
		}
	}
}
func testQueryConditionToOneSetOpStaffUsingUpdateStaff(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Staff{&b, &c} {
		err = a.SetUpdateStaff(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UpdateStaff != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UpdateStaffQueryConditions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UpdateStaffID, x.ID) {
			t.Error("foreign key was wrong value", a.UpdateStaffID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UpdateStaffID))
		reflect.Indirect(reflect.ValueOf(&a.UpdateStaffID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UpdateStaffID, x.ID) {
			t.Error("foreign key was wrong value", a.UpdateStaffID, x.ID)
		}
	}
}

func testQueryConditionToOneRemoveOpStaffUsingUpdateStaff(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a QueryCondition
	var b Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUpdateStaff(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUpdateStaff(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UpdateStaff().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UpdateStaff != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UpdateStaffID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UpdateStaffQueryConditions) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testQueryConditionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueryConditionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryConditionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueryConditionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryConditions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	queryConditionDBTypes = map[string]string{`ID`: `text`, `Del`: `boolean`, `CreatedAt`: `timestamp without time zone`, `CreStaffID`: `text`, `UpdatedAt`: `timestamp without time zone`, `UpdateStaffID`: `text`, `PatternName`: `text`, `CategoryName`: `text`, `IsDisclose`: `boolean`, `OwnerID`: `text`}
	_                     = bytes.MinRead
)

func testQueryConditionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(queryConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(queryConditionAllColumns) == len(queryConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQueryConditionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(queryConditionAllColumns) == len(queryConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryCondition{}
	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryConditionDBTypes, true, queryConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(queryConditionAllColumns, queryConditionPrimaryKeyColumns) {
		fields = queryConditionAllColumns
	} else {
		fields = strmangle.SetComplement(
			queryConditionAllColumns,
			queryConditionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QueryConditionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQueryConditionsUpsert(t *testing.T) {
	t.Parallel()

	if len(queryConditionAllColumns) == len(queryConditionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := QueryCondition{}
	if err = randomize.Struct(seed, &o, queryConditionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryCondition: %s", err)
	}

	count, err := QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, queryConditionDBTypes, false, queryConditionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryCondition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryCondition: %s", err)
	}

	count, err = QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
