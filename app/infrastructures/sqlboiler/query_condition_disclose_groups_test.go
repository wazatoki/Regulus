// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQueryConditionDiscloseGroups(t *testing.T) {
	t.Parallel()

	query := QueryConditionDiscloseGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQueryConditionDiscloseGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionDiscloseGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := QueryConditionDiscloseGroups().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionDiscloseGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryConditionDiscloseGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQueryConditionDiscloseGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QueryConditionDiscloseGroupExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if QueryConditionDiscloseGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QueryConditionDiscloseGroupExists to return true, but got false.")
	}
}

func testQueryConditionDiscloseGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	queryConditionDiscloseGroupFound, err := FindQueryConditionDiscloseGroup(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if queryConditionDiscloseGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQueryConditionDiscloseGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = QueryConditionDiscloseGroups().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testQueryConditionDiscloseGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := QueryConditionDiscloseGroups().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQueryConditionDiscloseGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	queryConditionDiscloseGroupOne := &QueryConditionDiscloseGroup{}
	queryConditionDiscloseGroupTwo := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, queryConditionDiscloseGroupOne, queryConditionDiscloseGroupDBTypes, false, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, queryConditionDiscloseGroupTwo, queryConditionDiscloseGroupDBTypes, false, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queryConditionDiscloseGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryConditionDiscloseGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryConditionDiscloseGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQueryConditionDiscloseGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	queryConditionDiscloseGroupOne := &QueryConditionDiscloseGroup{}
	queryConditionDiscloseGroupTwo := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, queryConditionDiscloseGroupOne, queryConditionDiscloseGroupDBTypes, false, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, queryConditionDiscloseGroupTwo, queryConditionDiscloseGroupDBTypes, false, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = queryConditionDiscloseGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = queryConditionDiscloseGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func queryConditionDiscloseGroupBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func queryConditionDiscloseGroupAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func queryConditionDiscloseGroupAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func queryConditionDiscloseGroupBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func queryConditionDiscloseGroupAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func queryConditionDiscloseGroupBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func queryConditionDiscloseGroupAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func queryConditionDiscloseGroupBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func queryConditionDiscloseGroupAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QueryConditionDiscloseGroup) error {
	*o = QueryConditionDiscloseGroup{}
	return nil
}

func testQueryConditionDiscloseGroupsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &QueryConditionDiscloseGroup{}
	o := &QueryConditionDiscloseGroup{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, false); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup object: %s", err)
	}

	AddQueryConditionDiscloseGroupHook(boil.BeforeInsertHook, queryConditionDiscloseGroupBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupBeforeInsertHooks = []QueryConditionDiscloseGroupHook{}

	AddQueryConditionDiscloseGroupHook(boil.AfterInsertHook, queryConditionDiscloseGroupAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupAfterInsertHooks = []QueryConditionDiscloseGroupHook{}

	AddQueryConditionDiscloseGroupHook(boil.AfterSelectHook, queryConditionDiscloseGroupAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupAfterSelectHooks = []QueryConditionDiscloseGroupHook{}

	AddQueryConditionDiscloseGroupHook(boil.BeforeUpdateHook, queryConditionDiscloseGroupBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupBeforeUpdateHooks = []QueryConditionDiscloseGroupHook{}

	AddQueryConditionDiscloseGroupHook(boil.AfterUpdateHook, queryConditionDiscloseGroupAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupAfterUpdateHooks = []QueryConditionDiscloseGroupHook{}

	AddQueryConditionDiscloseGroupHook(boil.BeforeDeleteHook, queryConditionDiscloseGroupBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupBeforeDeleteHooks = []QueryConditionDiscloseGroupHook{}

	AddQueryConditionDiscloseGroupHook(boil.AfterDeleteHook, queryConditionDiscloseGroupAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupAfterDeleteHooks = []QueryConditionDiscloseGroupHook{}

	AddQueryConditionDiscloseGroupHook(boil.BeforeUpsertHook, queryConditionDiscloseGroupBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupBeforeUpsertHooks = []QueryConditionDiscloseGroupHook{}

	AddQueryConditionDiscloseGroupHook(boil.AfterUpsertHook, queryConditionDiscloseGroupAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	queryConditionDiscloseGroupAfterUpsertHooks = []QueryConditionDiscloseGroupHook{}
}

func testQueryConditionDiscloseGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryConditionDiscloseGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(queryConditionDiscloseGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQueryConditionDiscloseGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueryConditionDiscloseGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QueryConditionDiscloseGroupSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQueryConditionDiscloseGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QueryConditionDiscloseGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	queryConditionDiscloseGroupDBTypes = map[string]string{`ID`: `text`, `Del`: `boolean`, `CreatedAt`: `timestamp without time zone`, `CreStaffID`: `text`, `UpdatedAt`: `timestamp without time zone`, `UpdateStaffID`: `text`, `QueryConditionID`: `text`, `GroupID`: `text`}
	_                                  = bytes.MinRead
)

func testQueryConditionDiscloseGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(queryConditionDiscloseGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(queryConditionDiscloseGroupAllColumns) == len(queryConditionDiscloseGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQueryConditionDiscloseGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(queryConditionDiscloseGroupAllColumns) == len(queryConditionDiscloseGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, queryConditionDiscloseGroupDBTypes, true, queryConditionDiscloseGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(queryConditionDiscloseGroupAllColumns, queryConditionDiscloseGroupPrimaryKeyColumns) {
		fields = queryConditionDiscloseGroupAllColumns
	} else {
		fields = strmangle.SetComplement(
			queryConditionDiscloseGroupAllColumns,
			queryConditionDiscloseGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QueryConditionDiscloseGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQueryConditionDiscloseGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(queryConditionDiscloseGroupAllColumns) == len(queryConditionDiscloseGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := QueryConditionDiscloseGroup{}
	if err = randomize.Struct(seed, &o, queryConditionDiscloseGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryConditionDiscloseGroup: %s", err)
	}

	count, err := QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, queryConditionDiscloseGroupDBTypes, false, queryConditionDiscloseGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QueryConditionDiscloseGroup struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QueryConditionDiscloseGroup: %s", err)
	}

	count, err = QueryConditionDiscloseGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
