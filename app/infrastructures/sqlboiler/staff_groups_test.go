// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStaffGroups(t *testing.T) {
	t.Parallel()

	query := StaffGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStaffGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StaffGroups().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaffGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StaffGroupExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StaffGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StaffGroupExists to return true, but got false.")
	}
}

func testStaffGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	staffGroupFound, err := FindStaffGroup(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if staffGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStaffGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StaffGroups().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStaffGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StaffGroups().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStaffGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	staffGroupOne := &StaffGroup{}
	staffGroupTwo := &StaffGroup{}
	if err = randomize.Struct(seed, staffGroupOne, staffGroupDBTypes, false, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, staffGroupTwo, staffGroupDBTypes, false, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staffGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staffGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StaffGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStaffGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	staffGroupOne := &StaffGroup{}
	staffGroupTwo := &StaffGroup{}
	if err = randomize.Struct(seed, staffGroupOne, staffGroupDBTypes, false, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, staffGroupTwo, staffGroupDBTypes, false, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staffGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staffGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func staffGroupBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func staffGroupAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func staffGroupAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func staffGroupBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func staffGroupAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func staffGroupBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func staffGroupAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func staffGroupBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func staffGroupAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StaffGroup) error {
	*o = StaffGroup{}
	return nil
}

func testStaffGroupsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StaffGroup{}
	o := &StaffGroup{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, staffGroupDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StaffGroup object: %s", err)
	}

	AddStaffGroupHook(boil.BeforeInsertHook, staffGroupBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	staffGroupBeforeInsertHooks = []StaffGroupHook{}

	AddStaffGroupHook(boil.AfterInsertHook, staffGroupAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	staffGroupAfterInsertHooks = []StaffGroupHook{}

	AddStaffGroupHook(boil.AfterSelectHook, staffGroupAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	staffGroupAfterSelectHooks = []StaffGroupHook{}

	AddStaffGroupHook(boil.BeforeUpdateHook, staffGroupBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	staffGroupBeforeUpdateHooks = []StaffGroupHook{}

	AddStaffGroupHook(boil.AfterUpdateHook, staffGroupAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	staffGroupAfterUpdateHooks = []StaffGroupHook{}

	AddStaffGroupHook(boil.BeforeDeleteHook, staffGroupBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	staffGroupBeforeDeleteHooks = []StaffGroupHook{}

	AddStaffGroupHook(boil.AfterDeleteHook, staffGroupAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	staffGroupAfterDeleteHooks = []StaffGroupHook{}

	AddStaffGroupHook(boil.BeforeUpsertHook, staffGroupBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	staffGroupBeforeUpsertHooks = []StaffGroupHook{}

	AddStaffGroupHook(boil.AfterUpsertHook, staffGroupAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	staffGroupAfterUpsertHooks = []StaffGroupHook{}
}

func testStaffGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaffGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(staffGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaffGroupToManyQueryConditions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffGroup
	var b, c QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, queryConditionDBTypes, false, queryConditionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"join_query_conditions_staff_groups\" (\"staff_groups_id\", \"query_conditions_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"join_query_conditions_staff_groups\" (\"staff_groups_id\", \"query_conditions_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.QueryConditions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StaffGroupSlice{&a}
	if err = a.L.LoadQueryConditions(ctx, tx, false, (*[]*StaffGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QueryConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.QueryConditions = nil
	if err = a.L.LoadQueryConditions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QueryConditions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStaffGroupToManyStaffs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffGroup
	var b, c Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staffDBTypes, false, staffColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"join_staffs_staff_groups\" (\"staff_groups_id\", \"staffs_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"join_staffs_staff_groups\" (\"staff_groups_id\", \"staffs_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Staffs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StaffGroupSlice{&a}
	if err = a.L.LoadStaffs(ctx, tx, false, (*[]*StaffGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Staffs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Staffs = nil
	if err = a.L.LoadStaffs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Staffs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStaffGroupToManyAddOpQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffGroup
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*QueryCondition{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddQueryConditions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.StaffGroups[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.StaffGroups[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.QueryConditions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.QueryConditions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.QueryConditions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStaffGroupToManySetOpQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffGroup
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetQueryConditions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetQueryConditions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.StaffGroups) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.StaffGroups) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.StaffGroups[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.StaffGroups[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.QueryConditions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.QueryConditions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStaffGroupToManyRemoveOpQueryConditions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffGroup
	var b, c, d, e QueryCondition

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QueryCondition{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, queryConditionDBTypes, false, strmangle.SetComplement(queryConditionPrimaryKeyColumns, queryConditionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddQueryConditions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveQueryConditions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.QueryConditions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.StaffGroups) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.StaffGroups) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.StaffGroups[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.StaffGroups[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.QueryConditions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.QueryConditions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.QueryConditions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStaffGroupToManyAddOpStaffs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffGroup
	var b, c, d, e Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Staff{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Staff{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStaffs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.StaffGroups[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.StaffGroups[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Staffs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Staffs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Staffs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStaffGroupToManySetOpStaffs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffGroup
	var b, c, d, e Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Staff{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetStaffs(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Staffs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetStaffs(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Staffs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.StaffGroups) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.StaffGroups) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.StaffGroups[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.StaffGroups[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Staffs[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Staffs[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStaffGroupToManyRemoveOpStaffs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffGroup
	var b, c, d, e Staff

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffGroupDBTypes, false, strmangle.SetComplement(staffGroupPrimaryKeyColumns, staffGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Staff{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staffDBTypes, false, strmangle.SetComplement(staffPrimaryKeyColumns, staffColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddStaffs(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Staffs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveStaffs(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Staffs().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.StaffGroups) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.StaffGroups) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.StaffGroups[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.StaffGroups[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Staffs) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Staffs[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Staffs[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStaffGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaffGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaffGroupSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaffGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StaffGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	staffGroupDBTypes = map[string]string{`ID`: `text`, `Del`: `boolean`, `CreatedAt`: `timestamp without time zone`, `CreStaffID`: `text`, `UpdatedAt`: `timestamp without time zone`, `UpdateStaffID`: `text`, `Name`: `text`}
	_                 = bytes.MinRead
)

func testStaffGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(staffGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(staffGroupAllColumns) == len(staffGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStaffGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(staffGroupAllColumns) == len(staffGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StaffGroup{}
	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staffGroupDBTypes, true, staffGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(staffGroupAllColumns, staffGroupPrimaryKeyColumns) {
		fields = staffGroupAllColumns
	} else {
		fields = strmangle.SetComplement(
			staffGroupAllColumns,
			staffGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StaffGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStaffGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(staffGroupAllColumns) == len(staffGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StaffGroup{}
	if err = randomize.Struct(seed, &o, staffGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StaffGroup: %s", err)
	}

	count, err := StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, staffGroupDBTypes, false, staffGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaffGroup struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StaffGroup: %s", err)
	}

	count, err = StaffGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
