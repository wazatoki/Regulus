// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQuerySearchConditionItems(t *testing.T) {
	t.Parallel()

	query := QuerySearchConditionItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQuerySearchConditionItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuerySearchConditionItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := QuerySearchConditionItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuerySearchConditionItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QuerySearchConditionItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuerySearchConditionItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QuerySearchConditionItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if QuerySearchConditionItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QuerySearchConditionItemExists to return true, but got false.")
	}
}

func testQuerySearchConditionItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	querySearchConditionItemFound, err := FindQuerySearchConditionItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if querySearchConditionItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQuerySearchConditionItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = QuerySearchConditionItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testQuerySearchConditionItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := QuerySearchConditionItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQuerySearchConditionItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	querySearchConditionItemOne := &QuerySearchConditionItem{}
	querySearchConditionItemTwo := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, querySearchConditionItemOne, querySearchConditionItemDBTypes, false, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}
	if err = randomize.Struct(seed, querySearchConditionItemTwo, querySearchConditionItemDBTypes, false, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = querySearchConditionItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = querySearchConditionItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QuerySearchConditionItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQuerySearchConditionItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	querySearchConditionItemOne := &QuerySearchConditionItem{}
	querySearchConditionItemTwo := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, querySearchConditionItemOne, querySearchConditionItemDBTypes, false, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}
	if err = randomize.Struct(seed, querySearchConditionItemTwo, querySearchConditionItemDBTypes, false, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = querySearchConditionItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = querySearchConditionItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func querySearchConditionItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func querySearchConditionItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func querySearchConditionItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func querySearchConditionItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func querySearchConditionItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func querySearchConditionItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func querySearchConditionItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func querySearchConditionItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func querySearchConditionItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *QuerySearchConditionItem) error {
	*o = QuerySearchConditionItem{}
	return nil
}

func testQuerySearchConditionItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &QuerySearchConditionItem{}
	o := &QuerySearchConditionItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem object: %s", err)
	}

	AddQuerySearchConditionItemHook(boil.BeforeInsertHook, querySearchConditionItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemBeforeInsertHooks = []QuerySearchConditionItemHook{}

	AddQuerySearchConditionItemHook(boil.AfterInsertHook, querySearchConditionItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemAfterInsertHooks = []QuerySearchConditionItemHook{}

	AddQuerySearchConditionItemHook(boil.AfterSelectHook, querySearchConditionItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemAfterSelectHooks = []QuerySearchConditionItemHook{}

	AddQuerySearchConditionItemHook(boil.BeforeUpdateHook, querySearchConditionItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemBeforeUpdateHooks = []QuerySearchConditionItemHook{}

	AddQuerySearchConditionItemHook(boil.AfterUpdateHook, querySearchConditionItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemAfterUpdateHooks = []QuerySearchConditionItemHook{}

	AddQuerySearchConditionItemHook(boil.BeforeDeleteHook, querySearchConditionItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemBeforeDeleteHooks = []QuerySearchConditionItemHook{}

	AddQuerySearchConditionItemHook(boil.AfterDeleteHook, querySearchConditionItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemAfterDeleteHooks = []QuerySearchConditionItemHook{}

	AddQuerySearchConditionItemHook(boil.BeforeUpsertHook, querySearchConditionItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemBeforeUpsertHooks = []QuerySearchConditionItemHook{}

	AddQuerySearchConditionItemHook(boil.AfterUpsertHook, querySearchConditionItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	querySearchConditionItemAfterUpsertHooks = []QuerySearchConditionItemHook{}
}

func testQuerySearchConditionItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQuerySearchConditionItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(querySearchConditionItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQuerySearchConditionItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQuerySearchConditionItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QuerySearchConditionItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testQuerySearchConditionItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := QuerySearchConditionItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	querySearchConditionItemDBTypes = map[string]string{`ID`: `text`, `Del`: `boolean`, `CreatedAt`: `timestamp without time zone`, `CreStaffID`: `text`, `UpdatedAt`: `timestamp without time zone`, `UpdateStaffID`: `text`, `QueryConditionID`: `text`, `SearchFieldID`: `text`, `ConditionValue`: `text`, `MatchType`: `text`, `Operator`: `text`, `RowOrder`: `integer`}
	_                               = bytes.MinRead
)

func testQuerySearchConditionItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(querySearchConditionItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(querySearchConditionItemAllColumns) == len(querySearchConditionItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQuerySearchConditionItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(querySearchConditionItemAllColumns) == len(querySearchConditionItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &QuerySearchConditionItem{}
	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, querySearchConditionItemDBTypes, true, querySearchConditionItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(querySearchConditionItemAllColumns, querySearchConditionItemPrimaryKeyColumns) {
		fields = querySearchConditionItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			querySearchConditionItemAllColumns,
			querySearchConditionItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QuerySearchConditionItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQuerySearchConditionItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(querySearchConditionItemAllColumns) == len(querySearchConditionItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := QuerySearchConditionItem{}
	if err = randomize.Struct(seed, &o, querySearchConditionItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QuerySearchConditionItem: %s", err)
	}

	count, err := QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, querySearchConditionItemDBTypes, false, querySearchConditionItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize QuerySearchConditionItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert QuerySearchConditionItem: %s", err)
	}

	count, err = QuerySearchConditionItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
