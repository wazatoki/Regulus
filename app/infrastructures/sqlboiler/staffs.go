// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Staff is an object representing the database table.
type Staff struct {
	ID            string      `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Del           bool        `db:"del" boil:"del" json:"del" toml:"del" yaml:"del"`
	CreatedAt     null.Time   `db:"created_at" boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	CreStaffID    null.String `db:"cre_staff_id" boil:"cre_staff_id" json:"cre_staff_id,omitempty" toml:"cre_staff_id" yaml:"cre_staff_id,omitempty"`
	UpdatedAt     null.Time   `db:"updated_at" boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdateStaffID null.String `db:"update_staff_id" boil:"update_staff_id" json:"update_staff_id,omitempty" toml:"update_staff_id" yaml:"update_staff_id,omitempty"`
	AccountID     string      `db:"account_id" boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Password      string      `db:"password" boil:"password" json:"password" toml:"password" yaml:"password"`
	Name          string      `db:"name" boil:"name" json:"name" toml:"name" yaml:"name"`

	R *staffR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffColumns = struct {
	ID            string
	Del           string
	CreatedAt     string
	CreStaffID    string
	UpdatedAt     string
	UpdateStaffID string
	AccountID     string
	Password      string
	Name          string
}{
	ID:            "id",
	Del:           "del",
	CreatedAt:     "created_at",
	CreStaffID:    "cre_staff_id",
	UpdatedAt:     "updated_at",
	UpdateStaffID: "update_staff_id",
	AccountID:     "account_id",
	Password:      "password",
	Name:          "name",
}

var StaffTableColumns = struct {
	ID            string
	Del           string
	CreatedAt     string
	CreStaffID    string
	UpdatedAt     string
	UpdateStaffID string
	AccountID     string
	Password      string
	Name          string
}{
	ID:            "staffs.id",
	Del:           "staffs.del",
	CreatedAt:     "staffs.created_at",
	CreStaffID:    "staffs.cre_staff_id",
	UpdatedAt:     "staffs.updated_at",
	UpdateStaffID: "staffs.update_staff_id",
	AccountID:     "staffs.account_id",
	Password:      "staffs.password",
	Name:          "staffs.name",
}

// Generated where

var StaffWhere = struct {
	ID            whereHelperstring
	Del           whereHelperbool
	CreatedAt     whereHelpernull_Time
	CreStaffID    whereHelpernull_String
	UpdatedAt     whereHelpernull_Time
	UpdateStaffID whereHelpernull_String
	AccountID     whereHelperstring
	Password      whereHelperstring
	Name          whereHelperstring
}{
	ID:            whereHelperstring{field: "\"staffs\".\"id\""},
	Del:           whereHelperbool{field: "\"staffs\".\"del\""},
	CreatedAt:     whereHelpernull_Time{field: "\"staffs\".\"created_at\""},
	CreStaffID:    whereHelpernull_String{field: "\"staffs\".\"cre_staff_id\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"staffs\".\"updated_at\""},
	UpdateStaffID: whereHelpernull_String{field: "\"staffs\".\"update_staff_id\""},
	AccountID:     whereHelperstring{field: "\"staffs\".\"account_id\""},
	Password:      whereHelperstring{field: "\"staffs\".\"password\""},
	Name:          whereHelperstring{field: "\"staffs\".\"name\""},
}

// StaffRels is where relationship names are stored.
var StaffRels = struct {
	FavoriteConditions         string
	StaffGroups                string
	CreStaffQueryConditions    string
	OwnerQueryConditions       string
	UpdateStaffQueryConditions string
}{
	FavoriteConditions:         "FavoriteConditions",
	StaffGroups:                "StaffGroups",
	CreStaffQueryConditions:    "CreStaffQueryConditions",
	OwnerQueryConditions:       "OwnerQueryConditions",
	UpdateStaffQueryConditions: "UpdateStaffQueryConditions",
}

// staffR is where relationships are stored.
type staffR struct {
	FavoriteConditions         FavoriteConditionSlice `db:"FavoriteConditions" boil:"FavoriteConditions" json:"FavoriteConditions" toml:"FavoriteConditions" yaml:"FavoriteConditions"`
	StaffGroups                StaffGroupSlice        `db:"StaffGroups" boil:"StaffGroups" json:"StaffGroups" toml:"StaffGroups" yaml:"StaffGroups"`
	CreStaffQueryConditions    QueryConditionSlice    `db:"CreStaffQueryConditions" boil:"CreStaffQueryConditions" json:"CreStaffQueryConditions" toml:"CreStaffQueryConditions" yaml:"CreStaffQueryConditions"`
	OwnerQueryConditions       QueryConditionSlice    `db:"OwnerQueryConditions" boil:"OwnerQueryConditions" json:"OwnerQueryConditions" toml:"OwnerQueryConditions" yaml:"OwnerQueryConditions"`
	UpdateStaffQueryConditions QueryConditionSlice    `db:"UpdateStaffQueryConditions" boil:"UpdateStaffQueryConditions" json:"UpdateStaffQueryConditions" toml:"UpdateStaffQueryConditions" yaml:"UpdateStaffQueryConditions"`
}

// NewStruct creates a new relationship struct
func (*staffR) NewStruct() *staffR {
	return &staffR{}
}

// staffL is where Load methods for each relationship are stored.
type staffL struct{}

var (
	staffAllColumns            = []string{"id", "del", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "account_id", "password", "name"}
	staffColumnsWithoutDefault = []string{"id", "created_at", "cre_staff_id", "updated_at", "update_staff_id", "account_id", "password", "name"}
	staffColumnsWithDefault    = []string{"del"}
	staffPrimaryKeyColumns     = []string{"id"}
)

type (
	// StaffSlice is an alias for a slice of pointers to Staff.
	// This should almost always be used instead of []Staff.
	StaffSlice []*Staff
	// StaffHook is the signature for custom Staff hook methods
	StaffHook func(context.Context, boil.ContextExecutor, *Staff) error

	staffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffType                 = reflect.TypeOf(&Staff{})
	staffMapping              = queries.MakeStructMapping(staffType)
	staffPrimaryKeyMapping, _ = queries.BindMapping(staffType, staffMapping, staffPrimaryKeyColumns)
	staffInsertCacheMut       sync.RWMutex
	staffInsertCache          = make(map[string]insertCache)
	staffUpdateCacheMut       sync.RWMutex
	staffUpdateCache          = make(map[string]updateCache)
	staffUpsertCacheMut       sync.RWMutex
	staffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var staffBeforeInsertHooks []StaffHook
var staffBeforeUpdateHooks []StaffHook
var staffBeforeDeleteHooks []StaffHook
var staffBeforeUpsertHooks []StaffHook

var staffAfterInsertHooks []StaffHook
var staffAfterSelectHooks []StaffHook
var staffAfterUpdateHooks []StaffHook
var staffAfterDeleteHooks []StaffHook
var staffAfterUpsertHooks []StaffHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Staff) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Staff) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Staff) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Staff) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Staff) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Staff) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Staff) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Staff) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Staff) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaffHook registers your hook function for all future operations.
func AddStaffHook(hookPoint boil.HookPoint, staffHook StaffHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		staffBeforeInsertHooks = append(staffBeforeInsertHooks, staffHook)
	case boil.BeforeUpdateHook:
		staffBeforeUpdateHooks = append(staffBeforeUpdateHooks, staffHook)
	case boil.BeforeDeleteHook:
		staffBeforeDeleteHooks = append(staffBeforeDeleteHooks, staffHook)
	case boil.BeforeUpsertHook:
		staffBeforeUpsertHooks = append(staffBeforeUpsertHooks, staffHook)
	case boil.AfterInsertHook:
		staffAfterInsertHooks = append(staffAfterInsertHooks, staffHook)
	case boil.AfterSelectHook:
		staffAfterSelectHooks = append(staffAfterSelectHooks, staffHook)
	case boil.AfterUpdateHook:
		staffAfterUpdateHooks = append(staffAfterUpdateHooks, staffHook)
	case boil.AfterDeleteHook:
		staffAfterDeleteHooks = append(staffAfterDeleteHooks, staffHook)
	case boil.AfterUpsertHook:
		staffAfterUpsertHooks = append(staffAfterUpsertHooks, staffHook)
	}
}

// One returns a single staff record from the query.
func (q staffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Staff, error) {
	o := &Staff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for staffs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Staff records from the query.
func (q staffQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaffSlice, error) {
	var o []*Staff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Staff slice")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Staff records in the query.
func (q staffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count staffs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if staffs exists")
	}

	return count > 0, nil
}

// FavoriteConditions retrieves all the favorite_condition's FavoriteConditions with an executor.
func (o *Staff) FavoriteConditions(mods ...qm.QueryMod) favoriteConditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"favorite_conditions\".\"staffs_id\"=?", o.ID),
	)

	query := FavoriteConditions(queryMods...)
	queries.SetFrom(query.Query, "\"favorite_conditions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"favorite_conditions\".*"})
	}

	return query
}

// StaffGroups retrieves all the staff_group's StaffGroups with an executor.
func (o *Staff) StaffGroups(mods ...qm.QueryMod) staffGroupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"join_staffs_staff_groups\" on \"staff_groups\".\"id\" = \"join_staffs_staff_groups\".\"staff_groups_id\""),
		qm.Where("\"join_staffs_staff_groups\".\"staffs_id\"=?", o.ID),
	)

	query := StaffGroups(queryMods...)
	queries.SetFrom(query.Query, "\"staff_groups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"staff_groups\".*"})
	}

	return query
}

// CreStaffQueryConditions retrieves all the query_condition's QueryConditions with an executor via cre_staff_id column.
func (o *Staff) CreStaffQueryConditions(mods ...qm.QueryMod) queryConditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"query_conditions\".\"cre_staff_id\"=?", o.ID),
	)

	query := QueryConditions(queryMods...)
	queries.SetFrom(query.Query, "\"query_conditions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"query_conditions\".*"})
	}

	return query
}

// OwnerQueryConditions retrieves all the query_condition's QueryConditions with an executor via owner_id column.
func (o *Staff) OwnerQueryConditions(mods ...qm.QueryMod) queryConditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"query_conditions\".\"owner_id\"=?", o.ID),
	)

	query := QueryConditions(queryMods...)
	queries.SetFrom(query.Query, "\"query_conditions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"query_conditions\".*"})
	}

	return query
}

// UpdateStaffQueryConditions retrieves all the query_condition's QueryConditions with an executor via update_staff_id column.
func (o *Staff) UpdateStaffQueryConditions(mods ...qm.QueryMod) queryConditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"query_conditions\".\"update_staff_id\"=?", o.ID),
	)

	query := QueryConditions(queryMods...)
	queries.SetFrom(query.Query, "\"query_conditions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"query_conditions\".*"})
	}

	return query
}

// LoadFavoriteConditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadFavoriteConditions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`favorite_conditions`),
		qm.WhereIn(`favorite_conditions.staffs_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load favorite_conditions")
	}

	var resultSlice []*FavoriteCondition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice favorite_conditions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on favorite_conditions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for favorite_conditions")
	}

	if len(favoriteConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FavoriteConditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &favoriteConditionR{}
			}
			foreign.R.Staff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StaffsID {
				local.R.FavoriteConditions = append(local.R.FavoriteConditions, foreign)
				if foreign.R == nil {
					foreign.R = &favoriteConditionR{}
				}
				foreign.R.Staff = local
				break
			}
		}
	}

	return nil
}

// LoadStaffGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadStaffGroups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"staff_groups\".id, \"staff_groups\".del, \"staff_groups\".created_at, \"staff_groups\".cre_staff_id, \"staff_groups\".updated_at, \"staff_groups\".update_staff_id, \"staff_groups\".name, \"a\".\"staffs_id\""),
		qm.From("\"staff_groups\""),
		qm.InnerJoin("\"join_staffs_staff_groups\" as \"a\" on \"staff_groups\".\"id\" = \"a\".\"staff_groups_id\""),
		qm.WhereIn("\"a\".\"staffs_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load staff_groups")
	}

	var resultSlice []*StaffGroup

	var localJoinCols []string
	for results.Next() {
		one := new(StaffGroup)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Del, &one.CreatedAt, &one.CreStaffID, &one.UpdatedAt, &one.UpdateStaffID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for staff_groups")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice staff_groups")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on staff_groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for staff_groups")
	}

	if len(staffGroupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StaffGroups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staffGroupR{}
			}
			foreign.R.Staffs = append(foreign.R.Staffs, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.StaffGroups = append(local.R.StaffGroups, foreign)
				if foreign.R == nil {
					foreign.R = &staffGroupR{}
				}
				foreign.R.Staffs = append(foreign.R.Staffs, local)
				break
			}
		}
	}

	return nil
}

// LoadCreStaffQueryConditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadCreStaffQueryConditions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`query_conditions`),
		qm.WhereIn(`query_conditions.cre_staff_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load query_conditions")
	}

	var resultSlice []*QueryCondition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice query_conditions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on query_conditions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_conditions")
	}

	if len(queryConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreStaffQueryConditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &queryConditionR{}
			}
			foreign.R.CreStaff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreStaffID) {
				local.R.CreStaffQueryConditions = append(local.R.CreStaffQueryConditions, foreign)
				if foreign.R == nil {
					foreign.R = &queryConditionR{}
				}
				foreign.R.CreStaff = local
				break
			}
		}
	}

	return nil
}

// LoadOwnerQueryConditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadOwnerQueryConditions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`query_conditions`),
		qm.WhereIn(`query_conditions.owner_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load query_conditions")
	}

	var resultSlice []*QueryCondition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice query_conditions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on query_conditions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_conditions")
	}

	if len(queryConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OwnerQueryConditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &queryConditionR{}
			}
			foreign.R.Owner = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OwnerID {
				local.R.OwnerQueryConditions = append(local.R.OwnerQueryConditions, foreign)
				if foreign.R == nil {
					foreign.R = &queryConditionR{}
				}
				foreign.R.Owner = local
				break
			}
		}
	}

	return nil
}

// LoadUpdateStaffQueryConditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadUpdateStaffQueryConditions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		object = maybeStaff.(*Staff)
	} else {
		slice = *maybeStaff.(*[]*Staff)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`query_conditions`),
		qm.WhereIn(`query_conditions.update_staff_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load query_conditions")
	}

	var resultSlice []*QueryCondition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice query_conditions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on query_conditions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for query_conditions")
	}

	if len(queryConditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdateStaffQueryConditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &queryConditionR{}
			}
			foreign.R.UpdateStaff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UpdateStaffID) {
				local.R.UpdateStaffQueryConditions = append(local.R.UpdateStaffQueryConditions, foreign)
				if foreign.R == nil {
					foreign.R = &queryConditionR{}
				}
				foreign.R.UpdateStaff = local
				break
			}
		}
	}

	return nil
}

// AddFavoriteConditions adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.FavoriteConditions.
// Sets related.R.Staff appropriately.
func (o *Staff) AddFavoriteConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FavoriteCondition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StaffsID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"favorite_conditions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"staffs_id"}),
				strmangle.WhereClause("\"", "\"", 2, favoriteConditionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.QueryConditionsID, rel.StaffsID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StaffsID = o.ID
		}
	}

	if o.R == nil {
		o.R = &staffR{
			FavoriteConditions: related,
		}
	} else {
		o.R.FavoriteConditions = append(o.R.FavoriteConditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &favoriteConditionR{
				Staff: o,
			}
		} else {
			rel.R.Staff = o
		}
	}
	return nil
}

// AddStaffGroups adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.StaffGroups.
// Sets related.R.Staffs appropriately.
func (o *Staff) AddStaffGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StaffGroup) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"join_staffs_staff_groups\" (\"staffs_id\", \"staff_groups_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &staffR{
			StaffGroups: related,
		}
	} else {
		o.R.StaffGroups = append(o.R.StaffGroups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staffGroupR{
				Staffs: StaffSlice{o},
			}
		} else {
			rel.R.Staffs = append(rel.R.Staffs, o)
		}
	}
	return nil
}

// SetStaffGroups removes all previously related items of the
// staff replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Staffs's StaffGroups accordingly.
// Replaces o.R.StaffGroups with related.
// Sets related.R.Staffs's StaffGroups accordingly.
func (o *Staff) SetStaffGroups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StaffGroup) error {
	query := "delete from \"join_staffs_staff_groups\" where \"staffs_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeStaffGroupsFromStaffsSlice(o, related)
	if o.R != nil {
		o.R.StaffGroups = nil
	}
	return o.AddStaffGroups(ctx, exec, insert, related...)
}

// RemoveStaffGroups relationships from objects passed in.
// Removes related items from R.StaffGroups (uses pointer comparison, removal does not keep order)
// Sets related.R.Staffs.
func (o *Staff) RemoveStaffGroups(ctx context.Context, exec boil.ContextExecutor, related ...*StaffGroup) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"join_staffs_staff_groups\" where \"staffs_id\" = $1 and \"staff_groups_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeStaffGroupsFromStaffsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StaffGroups {
			if rel != ri {
				continue
			}

			ln := len(o.R.StaffGroups)
			if ln > 1 && i < ln-1 {
				o.R.StaffGroups[i] = o.R.StaffGroups[ln-1]
			}
			o.R.StaffGroups = o.R.StaffGroups[:ln-1]
			break
		}
	}

	return nil
}

func removeStaffGroupsFromStaffsSlice(o *Staff, related []*StaffGroup) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Staffs {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Staffs)
			if ln > 1 && i < ln-1 {
				rel.R.Staffs[i] = rel.R.Staffs[ln-1]
			}
			rel.R.Staffs = rel.R.Staffs[:ln-1]
			break
		}
	}
}

// AddCreStaffQueryConditions adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.CreStaffQueryConditions.
// Sets related.R.CreStaff appropriately.
func (o *Staff) AddCreStaffQueryConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryCondition) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreStaffID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"query_conditions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"cre_staff_id"}),
				strmangle.WhereClause("\"", "\"", 2, queryConditionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreStaffID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &staffR{
			CreStaffQueryConditions: related,
		}
	} else {
		o.R.CreStaffQueryConditions = append(o.R.CreStaffQueryConditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &queryConditionR{
				CreStaff: o,
			}
		} else {
			rel.R.CreStaff = o
		}
	}
	return nil
}

// SetCreStaffQueryConditions removes all previously related items of the
// staff replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreStaff's CreStaffQueryConditions accordingly.
// Replaces o.R.CreStaffQueryConditions with related.
// Sets related.R.CreStaff's CreStaffQueryConditions accordingly.
func (o *Staff) SetCreStaffQueryConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryCondition) error {
	query := "update \"query_conditions\" set \"cre_staff_id\" = null where \"cre_staff_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreStaffQueryConditions {
			queries.SetScanner(&rel.CreStaffID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreStaff = nil
		}

		o.R.CreStaffQueryConditions = nil
	}
	return o.AddCreStaffQueryConditions(ctx, exec, insert, related...)
}

// RemoveCreStaffQueryConditions relationships from objects passed in.
// Removes related items from R.CreStaffQueryConditions (uses pointer comparison, removal does not keep order)
// Sets related.R.CreStaff.
func (o *Staff) RemoveCreStaffQueryConditions(ctx context.Context, exec boil.ContextExecutor, related ...*QueryCondition) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreStaffID, nil)
		if rel.R != nil {
			rel.R.CreStaff = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("cre_staff_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreStaffQueryConditions {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreStaffQueryConditions)
			if ln > 1 && i < ln-1 {
				o.R.CreStaffQueryConditions[i] = o.R.CreStaffQueryConditions[ln-1]
			}
			o.R.CreStaffQueryConditions = o.R.CreStaffQueryConditions[:ln-1]
			break
		}
	}

	return nil
}

// AddOwnerQueryConditions adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.OwnerQueryConditions.
// Sets related.R.Owner appropriately.
func (o *Staff) AddOwnerQueryConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryCondition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OwnerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"query_conditions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
				strmangle.WhereClause("\"", "\"", 2, queryConditionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OwnerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &staffR{
			OwnerQueryConditions: related,
		}
	} else {
		o.R.OwnerQueryConditions = append(o.R.OwnerQueryConditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &queryConditionR{
				Owner: o,
			}
		} else {
			rel.R.Owner = o
		}
	}
	return nil
}

// AddUpdateStaffQueryConditions adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.UpdateStaffQueryConditions.
// Sets related.R.UpdateStaff appropriately.
func (o *Staff) AddUpdateStaffQueryConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryCondition) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UpdateStaffID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"query_conditions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"update_staff_id"}),
				strmangle.WhereClause("\"", "\"", 2, queryConditionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UpdateStaffID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &staffR{
			UpdateStaffQueryConditions: related,
		}
	} else {
		o.R.UpdateStaffQueryConditions = append(o.R.UpdateStaffQueryConditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &queryConditionR{
				UpdateStaff: o,
			}
		} else {
			rel.R.UpdateStaff = o
		}
	}
	return nil
}

// SetUpdateStaffQueryConditions removes all previously related items of the
// staff replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UpdateStaff's UpdateStaffQueryConditions accordingly.
// Replaces o.R.UpdateStaffQueryConditions with related.
// Sets related.R.UpdateStaff's UpdateStaffQueryConditions accordingly.
func (o *Staff) SetUpdateStaffQueryConditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QueryCondition) error {
	query := "update \"query_conditions\" set \"update_staff_id\" = null where \"update_staff_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UpdateStaffQueryConditions {
			queries.SetScanner(&rel.UpdateStaffID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UpdateStaff = nil
		}

		o.R.UpdateStaffQueryConditions = nil
	}
	return o.AddUpdateStaffQueryConditions(ctx, exec, insert, related...)
}

// RemoveUpdateStaffQueryConditions relationships from objects passed in.
// Removes related items from R.UpdateStaffQueryConditions (uses pointer comparison, removal does not keep order)
// Sets related.R.UpdateStaff.
func (o *Staff) RemoveUpdateStaffQueryConditions(ctx context.Context, exec boil.ContextExecutor, related ...*QueryCondition) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UpdateStaffID, nil)
		if rel.R != nil {
			rel.R.UpdateStaff = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("update_staff_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UpdateStaffQueryConditions {
			if rel != ri {
				continue
			}

			ln := len(o.R.UpdateStaffQueryConditions)
			if ln > 1 && i < ln-1 {
				o.R.UpdateStaffQueryConditions[i] = o.R.UpdateStaffQueryConditions[ln-1]
			}
			o.R.UpdateStaffQueryConditions = o.R.UpdateStaffQueryConditions[:ln-1]
			break
		}
	}

	return nil
}

// Staffs retrieves all the records using an executor.
func Staffs(mods ...qm.QueryMod) staffQuery {
	mods = append(mods, qm.From("\"staffs\""))
	return staffQuery{NewQuery(mods...)}
}

// FindStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaff(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Staff, error) {
	staffObj := &Staff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"staffs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, staffObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from staffs")
	}

	if err = staffObj.doAfterSelectHooks(ctx, exec); err != nil {
		return staffObj, err
	}

	return staffObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Staff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no staffs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffInsertCacheMut.RLock()
	cache, cached := staffInsertCache[key]
	staffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffType, staffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"staffs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"staffs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into staffs")
	}

	if !cached {
		staffInsertCacheMut.Lock()
		staffInsertCache[key] = cache
		staffInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Staff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Staff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	staffUpdateCacheMut.RLock()
	cache, cached := staffUpdateCache[key]
	staffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update staffs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"staffs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, staffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, append(wl, staffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update staffs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for staffs")
	}

	if !cached {
		staffUpdateCacheMut.Lock()
		staffUpdateCache[key] = cache
		staffUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q staffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for staffs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, staffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all staff")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Staff) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no staffs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffUpsertCacheMut.RLock()
	cache, cached := staffUpsertCache[key]
	staffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert staffs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(staffPrimaryKeyColumns))
			copy(conflict, staffPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"staffs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffType, staffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert staffs")
	}

	if !cached {
		staffUpsertCacheMut.Lock()
		staffUpsertCache[key] = cache
		staffUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Staff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Staff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Staff provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffPrimaryKeyMapping)
	sql := "DELETE FROM \"staffs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for staffs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no staffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for staffs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(staffBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for staffs")
	}

	if len(staffAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Staff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaff(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"staffs\".* FROM \"staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in StaffSlice")
	}

	*o = slice

	return nil
}

// StaffExists checks if the Staff row exists.
func StaffExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"staffs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if staffs exists")
	}

	return exists, nil
}
