// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrations)
	t.Run("Makers", testMakers)
	t.Run("QueryConditions", testQueryConditions)
	t.Run("QueryDisplayItems", testQueryDisplayItems)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItems)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItems)
	t.Run("StaffGroups", testStaffGroups)
	t.Run("Staffs", testStaffs)
}

func TestDelete(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsDelete)
	t.Run("Makers", testMakersDelete)
	t.Run("QueryConditions", testQueryConditionsDelete)
	t.Run("QueryDisplayItems", testQueryDisplayItemsDelete)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsDelete)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsDelete)
	t.Run("StaffGroups", testStaffGroupsDelete)
	t.Run("Staffs", testStaffsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsQueryDeleteAll)
	t.Run("Makers", testMakersQueryDeleteAll)
	t.Run("QueryConditions", testQueryConditionsQueryDeleteAll)
	t.Run("QueryDisplayItems", testQueryDisplayItemsQueryDeleteAll)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsQueryDeleteAll)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsQueryDeleteAll)
	t.Run("StaffGroups", testStaffGroupsQueryDeleteAll)
	t.Run("Staffs", testStaffsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSliceDeleteAll)
	t.Run("Makers", testMakersSliceDeleteAll)
	t.Run("QueryConditions", testQueryConditionsSliceDeleteAll)
	t.Run("QueryDisplayItems", testQueryDisplayItemsSliceDeleteAll)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsSliceDeleteAll)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsSliceDeleteAll)
	t.Run("StaffGroups", testStaffGroupsSliceDeleteAll)
	t.Run("Staffs", testStaffsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsExists)
	t.Run("Makers", testMakersExists)
	t.Run("QueryConditions", testQueryConditionsExists)
	t.Run("QueryDisplayItems", testQueryDisplayItemsExists)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsExists)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsExists)
	t.Run("StaffGroups", testStaffGroupsExists)
	t.Run("Staffs", testStaffsExists)
}

func TestFind(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsFind)
	t.Run("Makers", testMakersFind)
	t.Run("QueryConditions", testQueryConditionsFind)
	t.Run("QueryDisplayItems", testQueryDisplayItemsFind)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsFind)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsFind)
	t.Run("StaffGroups", testStaffGroupsFind)
	t.Run("Staffs", testStaffsFind)
}

func TestBind(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsBind)
	t.Run("Makers", testMakersBind)
	t.Run("QueryConditions", testQueryConditionsBind)
	t.Run("QueryDisplayItems", testQueryDisplayItemsBind)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsBind)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsBind)
	t.Run("StaffGroups", testStaffGroupsBind)
	t.Run("Staffs", testStaffsBind)
}

func TestOne(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsOne)
	t.Run("Makers", testMakersOne)
	t.Run("QueryConditions", testQueryConditionsOne)
	t.Run("QueryDisplayItems", testQueryDisplayItemsOne)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsOne)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsOne)
	t.Run("StaffGroups", testStaffGroupsOne)
	t.Run("Staffs", testStaffsOne)
}

func TestAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsAll)
	t.Run("Makers", testMakersAll)
	t.Run("QueryConditions", testQueryConditionsAll)
	t.Run("QueryDisplayItems", testQueryDisplayItemsAll)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsAll)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsAll)
	t.Run("StaffGroups", testStaffGroupsAll)
	t.Run("Staffs", testStaffsAll)
}

func TestCount(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsCount)
	t.Run("Makers", testMakersCount)
	t.Run("QueryConditions", testQueryConditionsCount)
	t.Run("QueryDisplayItems", testQueryDisplayItemsCount)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsCount)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsCount)
	t.Run("StaffGroups", testStaffGroupsCount)
	t.Run("Staffs", testStaffsCount)
}

func TestHooks(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsHooks)
	t.Run("Makers", testMakersHooks)
	t.Run("QueryConditions", testQueryConditionsHooks)
	t.Run("QueryDisplayItems", testQueryDisplayItemsHooks)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsHooks)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsHooks)
	t.Run("StaffGroups", testStaffGroupsHooks)
	t.Run("Staffs", testStaffsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsInsert)
	t.Run("GorpMigrations", testGorpMigrationsInsertWhitelist)
	t.Run("Makers", testMakersInsert)
	t.Run("Makers", testMakersInsertWhitelist)
	t.Run("QueryConditions", testQueryConditionsInsert)
	t.Run("QueryConditions", testQueryConditionsInsertWhitelist)
	t.Run("QueryDisplayItems", testQueryDisplayItemsInsert)
	t.Run("QueryDisplayItems", testQueryDisplayItemsInsertWhitelist)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsInsert)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsInsertWhitelist)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsInsert)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsInsertWhitelist)
	t.Run("StaffGroups", testStaffGroupsInsert)
	t.Run("StaffGroups", testStaffGroupsInsertWhitelist)
	t.Run("Staffs", testStaffsInsert)
	t.Run("Staffs", testStaffsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("QueryConditionToStaffUsingCreStaff", testQueryConditionToOneStaffUsingCreStaff)
	t.Run("QueryConditionToStaffUsingOwner", testQueryConditionToOneStaffUsingOwner)
	t.Run("QueryConditionToStaffUsingUpdateStaff", testQueryConditionToOneStaffUsingUpdateStaff)
	t.Run("QueryDisplayItemToQueryConditionUsingQueryCondition", testQueryDisplayItemToOneQueryConditionUsingQueryCondition)
	t.Run("QueryOrderConditionItemToQueryConditionUsingQueryCondition", testQueryOrderConditionItemToOneQueryConditionUsingQueryCondition)
	t.Run("QuerySearchConditionItemToQueryConditionUsingQueryCondition", testQuerySearchConditionItemToOneQueryConditionUsingQueryCondition)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("QueryConditionToStaffs", testQueryConditionToManyStaffs)
	t.Run("QueryConditionToStaffGroups", testQueryConditionToManyStaffGroups)
	t.Run("QueryConditionToQueryDisplayItems", testQueryConditionToManyQueryDisplayItems)
	t.Run("QueryConditionToQueryOrderConditionItems", testQueryConditionToManyQueryOrderConditionItems)
	t.Run("QueryConditionToQuerySearchConditionItems", testQueryConditionToManyQuerySearchConditionItems)
	t.Run("StaffGroupToQueryConditions", testStaffGroupToManyQueryConditions)
	t.Run("StaffGroupToStaffs", testStaffGroupToManyStaffs)
	t.Run("StaffToQueryConditions", testStaffToManyQueryConditions)
	t.Run("StaffToStaffGroups", testStaffToManyStaffGroups)
	t.Run("StaffToCreStaffQueryConditions", testStaffToManyCreStaffQueryConditions)
	t.Run("StaffToOwnerQueryConditions", testStaffToManyOwnerQueryConditions)
	t.Run("StaffToUpdateStaffQueryConditions", testStaffToManyUpdateStaffQueryConditions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("QueryConditionToStaffUsingCreStaffQueryConditions", testQueryConditionToOneSetOpStaffUsingCreStaff)
	t.Run("QueryConditionToStaffUsingOwnerQueryConditions", testQueryConditionToOneSetOpStaffUsingOwner)
	t.Run("QueryConditionToStaffUsingUpdateStaffQueryConditions", testQueryConditionToOneSetOpStaffUsingUpdateStaff)
	t.Run("QueryDisplayItemToQueryConditionUsingQueryDisplayItems", testQueryDisplayItemToOneSetOpQueryConditionUsingQueryCondition)
	t.Run("QueryOrderConditionItemToQueryConditionUsingQueryOrderConditionItems", testQueryOrderConditionItemToOneSetOpQueryConditionUsingQueryCondition)
	t.Run("QuerySearchConditionItemToQueryConditionUsingQuerySearchConditionItems", testQuerySearchConditionItemToOneSetOpQueryConditionUsingQueryCondition)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("QueryConditionToStaffUsingCreStaffQueryConditions", testQueryConditionToOneRemoveOpStaffUsingCreStaff)
	t.Run("QueryConditionToStaffUsingUpdateStaffQueryConditions", testQueryConditionToOneRemoveOpStaffUsingUpdateStaff)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("QueryConditionToStaffs", testQueryConditionToManyAddOpStaffs)
	t.Run("QueryConditionToStaffGroups", testQueryConditionToManyAddOpStaffGroups)
	t.Run("QueryConditionToQueryDisplayItems", testQueryConditionToManyAddOpQueryDisplayItems)
	t.Run("QueryConditionToQueryOrderConditionItems", testQueryConditionToManyAddOpQueryOrderConditionItems)
	t.Run("QueryConditionToQuerySearchConditionItems", testQueryConditionToManyAddOpQuerySearchConditionItems)
	t.Run("StaffGroupToQueryConditions", testStaffGroupToManyAddOpQueryConditions)
	t.Run("StaffGroupToStaffs", testStaffGroupToManyAddOpStaffs)
	t.Run("StaffToQueryConditions", testStaffToManyAddOpQueryConditions)
	t.Run("StaffToStaffGroups", testStaffToManyAddOpStaffGroups)
	t.Run("StaffToCreStaffQueryConditions", testStaffToManyAddOpCreStaffQueryConditions)
	t.Run("StaffToOwnerQueryConditions", testStaffToManyAddOpOwnerQueryConditions)
	t.Run("StaffToUpdateStaffQueryConditions", testStaffToManyAddOpUpdateStaffQueryConditions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("QueryConditionToStaffs", testQueryConditionToManySetOpStaffs)
	t.Run("QueryConditionToStaffGroups", testQueryConditionToManySetOpStaffGroups)
	t.Run("StaffGroupToQueryConditions", testStaffGroupToManySetOpQueryConditions)
	t.Run("StaffGroupToStaffs", testStaffGroupToManySetOpStaffs)
	t.Run("StaffToQueryConditions", testStaffToManySetOpQueryConditions)
	t.Run("StaffToStaffGroups", testStaffToManySetOpStaffGroups)
	t.Run("StaffToCreStaffQueryConditions", testStaffToManySetOpCreStaffQueryConditions)
	t.Run("StaffToUpdateStaffQueryConditions", testStaffToManySetOpUpdateStaffQueryConditions)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("QueryConditionToStaffs", testQueryConditionToManyRemoveOpStaffs)
	t.Run("QueryConditionToStaffGroups", testQueryConditionToManyRemoveOpStaffGroups)
	t.Run("StaffGroupToQueryConditions", testStaffGroupToManyRemoveOpQueryConditions)
	t.Run("StaffGroupToStaffs", testStaffGroupToManyRemoveOpStaffs)
	t.Run("StaffToQueryConditions", testStaffToManyRemoveOpQueryConditions)
	t.Run("StaffToStaffGroups", testStaffToManyRemoveOpStaffGroups)
	t.Run("StaffToCreStaffQueryConditions", testStaffToManyRemoveOpCreStaffQueryConditions)
	t.Run("StaffToUpdateStaffQueryConditions", testStaffToManyRemoveOpUpdateStaffQueryConditions)
}

func TestReload(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsReload)
	t.Run("Makers", testMakersReload)
	t.Run("QueryConditions", testQueryConditionsReload)
	t.Run("QueryDisplayItems", testQueryDisplayItemsReload)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsReload)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsReload)
	t.Run("StaffGroups", testStaffGroupsReload)
	t.Run("Staffs", testStaffsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsReloadAll)
	t.Run("Makers", testMakersReloadAll)
	t.Run("QueryConditions", testQueryConditionsReloadAll)
	t.Run("QueryDisplayItems", testQueryDisplayItemsReloadAll)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsReloadAll)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsReloadAll)
	t.Run("StaffGroups", testStaffGroupsReloadAll)
	t.Run("Staffs", testStaffsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSelect)
	t.Run("Makers", testMakersSelect)
	t.Run("QueryConditions", testQueryConditionsSelect)
	t.Run("QueryDisplayItems", testQueryDisplayItemsSelect)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsSelect)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsSelect)
	t.Run("StaffGroups", testStaffGroupsSelect)
	t.Run("Staffs", testStaffsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsUpdate)
	t.Run("Makers", testMakersUpdate)
	t.Run("QueryConditions", testQueryConditionsUpdate)
	t.Run("QueryDisplayItems", testQueryDisplayItemsUpdate)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsUpdate)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsUpdate)
	t.Run("StaffGroups", testStaffGroupsUpdate)
	t.Run("Staffs", testStaffsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSliceUpdateAll)
	t.Run("Makers", testMakersSliceUpdateAll)
	t.Run("QueryConditions", testQueryConditionsSliceUpdateAll)
	t.Run("QueryDisplayItems", testQueryDisplayItemsSliceUpdateAll)
	t.Run("QueryOrderConditionItems", testQueryOrderConditionItemsSliceUpdateAll)
	t.Run("QuerySearchConditionItems", testQuerySearchConditionItemsSliceUpdateAll)
	t.Run("StaffGroups", testStaffGroupsSliceUpdateAll)
	t.Run("Staffs", testStaffsSliceUpdateAll)
}
